// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _p_fill_n_a_ap_fixed_unsigned_long_double_s_HH_
#define _p_fill_n_a_ap_fixed_unsigned_long_double_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct p_fill_n_a_ap_fixed_unsigned_long_double_s : public sc_module {
    // Port declarations 54
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<35> > ap_return_0;
    sc_out< sc_lv<35> > ap_return_1;
    sc_out< sc_lv<35> > ap_return_2;
    sc_out< sc_lv<35> > ap_return_3;
    sc_out< sc_lv<35> > ap_return_4;
    sc_out< sc_lv<35> > ap_return_5;
    sc_out< sc_lv<35> > ap_return_6;
    sc_out< sc_lv<35> > ap_return_7;
    sc_out< sc_lv<35> > ap_return_8;
    sc_out< sc_lv<35> > ap_return_9;
    sc_out< sc_lv<35> > ap_return_10;
    sc_out< sc_lv<35> > ap_return_11;
    sc_out< sc_lv<35> > ap_return_12;
    sc_out< sc_lv<35> > ap_return_13;
    sc_out< sc_lv<35> > ap_return_14;
    sc_out< sc_lv<35> > ap_return_15;
    sc_out< sc_lv<35> > ap_return_16;
    sc_out< sc_lv<35> > ap_return_17;
    sc_out< sc_lv<35> > ap_return_18;
    sc_out< sc_lv<35> > ap_return_19;
    sc_out< sc_lv<35> > ap_return_20;
    sc_out< sc_lv<35> > ap_return_21;
    sc_out< sc_lv<35> > ap_return_22;
    sc_out< sc_lv<35> > ap_return_23;
    sc_out< sc_lv<35> > ap_return_24;
    sc_out< sc_lv<35> > ap_return_25;
    sc_out< sc_lv<35> > ap_return_26;
    sc_out< sc_lv<35> > ap_return_27;
    sc_out< sc_lv<35> > ap_return_28;
    sc_out< sc_lv<35> > ap_return_29;
    sc_out< sc_lv<35> > ap_return_30;
    sc_out< sc_lv<35> > ap_return_31;
    sc_out< sc_lv<35> > ap_return_32;
    sc_out< sc_lv<35> > ap_return_33;
    sc_out< sc_lv<35> > ap_return_34;
    sc_out< sc_lv<35> > ap_return_35;
    sc_out< sc_lv<35> > ap_return_36;
    sc_out< sc_lv<35> > ap_return_37;
    sc_out< sc_lv<35> > ap_return_38;
    sc_out< sc_lv<35> > ap_return_39;
    sc_out< sc_lv<35> > ap_return_40;
    sc_out< sc_lv<35> > ap_return_41;
    sc_out< sc_lv<35> > ap_return_42;
    sc_out< sc_lv<35> > ap_return_43;
    sc_out< sc_lv<35> > ap_return_44;
    sc_out< sc_lv<35> > ap_return_45;
    sc_out< sc_lv<35> > ap_return_46;
    sc_out< sc_lv<35> > ap_return_47;


    // Module declarations
    p_fill_n_a_ap_fixed_unsigned_long_double_s(sc_module_name name);
    SC_HAS_PROCESS(p_fill_n_a_ap_fixed_unsigned_long_double_s);

    ~p_fill_n_a_ap_fixed_unsigned_long_double_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > add_ln744_fu_328_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > p_niter_fu_574_p2;
    sc_signal< sc_lv<1> > icmp_ln743_fu_322_p2;
    sc_signal< sc_lv<6> > p_02_rec_reg_300;
    sc_signal< sc_lv<6> > p_niter_0_reg_311;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_30;
    static const sc_lv<35> ap_const_lv35_0;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln744_fu_328_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_16();
    void thread_ap_return_17();
    void thread_ap_return_18();
    void thread_ap_return_19();
    void thread_ap_return_2();
    void thread_ap_return_20();
    void thread_ap_return_21();
    void thread_ap_return_22();
    void thread_ap_return_23();
    void thread_ap_return_24();
    void thread_ap_return_25();
    void thread_ap_return_26();
    void thread_ap_return_27();
    void thread_ap_return_28();
    void thread_ap_return_29();
    void thread_ap_return_3();
    void thread_ap_return_30();
    void thread_ap_return_31();
    void thread_ap_return_32();
    void thread_ap_return_33();
    void thread_ap_return_34();
    void thread_ap_return_35();
    void thread_ap_return_36();
    void thread_ap_return_37();
    void thread_ap_return_38();
    void thread_ap_return_39();
    void thread_ap_return_4();
    void thread_ap_return_40();
    void thread_ap_return_41();
    void thread_ap_return_42();
    void thread_ap_return_43();
    void thread_ap_return_44();
    void thread_ap_return_45();
    void thread_ap_return_46();
    void thread_ap_return_47();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_icmp_ln743_fu_322_p2();
    void thread_p_niter_fu_574_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
