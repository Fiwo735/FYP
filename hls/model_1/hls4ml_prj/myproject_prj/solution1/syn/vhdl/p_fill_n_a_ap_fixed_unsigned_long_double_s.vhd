-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_fill_n_a_ap_fixed_unsigned_long_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (34 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of p_fill_n_a_ap_fixed_unsigned_long_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln744_fu_328_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_niter_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln743_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_02_rec_reg_300 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_niter_0_reg_311 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_02_rec_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln743_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_02_rec_reg_300 <= add_ln744_fu_328_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_02_rec_reg_300 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_niter_0_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln743_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_niter_0_reg_311 <= p_niter_fu_574_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_niter_0_reg_311 <= ap_const_lv6_30;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln743_fu_322_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln743_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln744_fu_328_p2 <= std_logic_vector(unsigned(p_02_rec_reg_300) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln743_fu_322_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln743_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln743_fu_322_p2)
    begin
        if (((icmp_ln743_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= ap_const_lv35_0;
    ap_return_1 <= ap_const_lv35_0;
    ap_return_10 <= ap_const_lv35_0;
    ap_return_11 <= ap_const_lv35_0;
    ap_return_12 <= ap_const_lv35_0;
    ap_return_13 <= ap_const_lv35_0;
    ap_return_14 <= ap_const_lv35_0;
    ap_return_15 <= ap_const_lv35_0;
    ap_return_16 <= ap_const_lv35_0;
    ap_return_17 <= ap_const_lv35_0;
    ap_return_18 <= ap_const_lv35_0;
    ap_return_19 <= ap_const_lv35_0;
    ap_return_2 <= ap_const_lv35_0;
    ap_return_20 <= ap_const_lv35_0;
    ap_return_21 <= ap_const_lv35_0;
    ap_return_22 <= ap_const_lv35_0;
    ap_return_23 <= ap_const_lv35_0;
    ap_return_24 <= ap_const_lv35_0;
    ap_return_25 <= ap_const_lv35_0;
    ap_return_26 <= ap_const_lv35_0;
    ap_return_27 <= ap_const_lv35_0;
    ap_return_28 <= ap_const_lv35_0;
    ap_return_29 <= ap_const_lv35_0;
    ap_return_3 <= ap_const_lv35_0;
    ap_return_30 <= ap_const_lv35_0;
    ap_return_31 <= ap_const_lv35_0;
    ap_return_32 <= ap_const_lv35_0;
    ap_return_33 <= ap_const_lv35_0;
    ap_return_34 <= ap_const_lv35_0;
    ap_return_35 <= ap_const_lv35_0;
    ap_return_36 <= ap_const_lv35_0;
    ap_return_37 <= ap_const_lv35_0;
    ap_return_38 <= ap_const_lv35_0;
    ap_return_39 <= ap_const_lv35_0;
    ap_return_4 <= ap_const_lv35_0;
    ap_return_40 <= ap_const_lv35_0;
    ap_return_41 <= ap_const_lv35_0;
    ap_return_42 <= ap_const_lv35_0;
    ap_return_43 <= ap_const_lv35_0;
    ap_return_44 <= ap_const_lv35_0;
    ap_return_45 <= ap_const_lv35_0;
    ap_return_46 <= ap_const_lv35_0;
    ap_return_47 <= ap_const_lv35_0;
    ap_return_5 <= ap_const_lv35_0;
    ap_return_6 <= ap_const_lv35_0;
    ap_return_7 <= ap_const_lv35_0;
    ap_return_8 <= ap_const_lv35_0;
    ap_return_9 <= ap_const_lv35_0;
    icmp_ln743_fu_322_p2 <= "1" when (p_niter_0_reg_311 = ap_const_lv6_0) else "0";
    p_niter_fu_574_p2 <= std_logic_vector(unsigned(p_niter_0_reg_311) + unsigned(ap_const_lv6_3F));
end behav;
