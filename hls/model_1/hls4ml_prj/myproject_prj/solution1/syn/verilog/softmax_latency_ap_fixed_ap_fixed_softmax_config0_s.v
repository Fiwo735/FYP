// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_ap_fixed_ap_fixed_softmax_config0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] exp_table3_address0;
reg    exp_table3_ce0;
wire   [15:0] exp_table3_q0;
wire   [11:0] exp_table3_address1;
reg    exp_table3_ce1;
wire   [15:0] exp_table3_q1;
wire   [11:0] exp_table3_address2;
reg    exp_table3_ce2;
wire   [15:0] exp_table3_q2;
wire   [11:0] exp_table3_address3;
reg    exp_table3_ce3;
wire   [15:0] exp_table3_q3;
wire   [11:0] exp_table3_address4;
reg    exp_table3_ce4;
wire   [15:0] exp_table3_q4;
wire   [11:0] invert_table4_address0;
reg    invert_table4_ce0;
wire   [15:0] invert_table4_q0;
reg  signed [15:0] exp_res_0_V_reg_414;
reg  signed [15:0] exp_res_1_V_reg_419;
reg  signed [15:0] exp_res_2_V_reg_424;
reg  signed [15:0] exp_res_3_V_reg_429;
reg  signed [15:0] exp_res_4_V_reg_434;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln307_fu_156_p1;
wire   [63:0] zext_ln307_1_fu_171_p1;
wire   [63:0] zext_ln307_2_fu_186_p1;
wire   [63:0] zext_ln307_3_fu_201_p1;
wire   [63:0] zext_ln307_4_fu_216_p1;
wire   [63:0] zext_ln319_fu_255_p1;
wire   [11:0] y_V_fu_146_p4;
wire   [11:0] y_V_1_fu_161_p4;
wire   [11:0] y_V_2_fu_176_p4;
wire   [11:0] y_V_3_fu_191_p4;
wire   [11:0] y_V_4_fu_206_p4;
wire  signed [15:0] add_ln703_fu_221_p0;
wire  signed [15:0] add_ln703_fu_221_p1;
wire  signed [15:0] add_ln703_32_fu_227_p0;
wire  signed [15:0] add_ln703_32_fu_227_p1;
wire   [15:0] add_ln703_32_fu_227_p2;
wire  signed [15:0] add_ln703_33_fu_233_p1;
wire   [15:0] add_ln703_33_fu_233_p2;
wire   [15:0] add_ln703_fu_221_p2;
wire   [15:0] exp_sum_V_fu_239_p2;
wire   [11:0] y_V_5_fu_245_p4;
wire  signed [25:0] mul_ln1118_fu_354_p2;
wire  signed [25:0] mul_ln1118_1_fu_361_p2;
wire  signed [25:0] mul_ln1118_2_fu_368_p2;
wire  signed [25:0] mul_ln1118_3_fu_375_p2;
wire  signed [25:0] mul_ln1118_4_fu_382_p2;
wire  signed [15:0] mul_ln1118_fu_354_p0;
wire  signed [25:0] sext_ln1116_fu_260_p1;
wire  signed [15:0] mul_ln1118_1_fu_361_p0;
wire  signed [15:0] mul_ln1118_2_fu_368_p0;
wire  signed [15:0] mul_ln1118_3_fu_375_p0;
wire  signed [15:0] mul_ln1118_4_fu_382_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_exp_tdEe #(
    .DataWidth( 16 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
exp_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table3_address0),
    .ce0(exp_table3_ce0),
    .q0(exp_table3_q0),
    .address1(exp_table3_address1),
    .ce1(exp_table3_ce1),
    .q1(exp_table3_q1),
    .address2(exp_table3_address2),
    .ce2(exp_table3_ce2),
    .q2(exp_table3_q2),
    .address3(exp_table3_address3),
    .ce3(exp_table3_ce3),
    .q3(exp_table3_q3),
    .address4(exp_table3_address4),
    .ce4(exp_table3_ce4),
    .q4(exp_table3_q4)
);

softmax_latency_ap_fixed_ap_fixed_sa_softmax_config0_s_incud #(
    .DataWidth( 16 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
invert_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table4_address0),
    .ce0(invert_table4_ce0),
    .q0(invert_table4_q0)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U1028(
    .din0(mul_ln1118_fu_354_p0),
    .din1(exp_res_0_V_reg_414),
    .dout(mul_ln1118_fu_354_p2)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U1029(
    .din0(mul_ln1118_1_fu_361_p0),
    .din1(exp_res_1_V_reg_419),
    .dout(mul_ln1118_1_fu_361_p2)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U1030(
    .din0(mul_ln1118_2_fu_368_p0),
    .din1(exp_res_2_V_reg_424),
    .dout(mul_ln1118_2_fu_368_p2)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U1031(
    .din0(mul_ln1118_3_fu_375_p0),
    .din1(exp_res_3_V_reg_429),
    .dout(mul_ln1118_3_fu_375_p2)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U1032(
    .din0(mul_ln1118_4_fu_382_p0),
    .din1(exp_res_4_V_reg_434),
    .dout(mul_ln1118_4_fu_382_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_0_V_reg_414 <= exp_table3_q0;
        exp_res_1_V_reg_419 <= exp_table3_q1;
        exp_res_2_V_reg_424 <= exp_table3_q2;
        exp_res_3_V_reg_429 <= exp_table3_q3;
        exp_res_4_V_reg_434 <= exp_table3_q4;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce0 = 1'b1;
    end else begin
        exp_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce1 = 1'b1;
    end else begin
        exp_table3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce2 = 1'b1;
    end else begin
        exp_table3_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce3 = 1'b1;
    end else begin
        exp_table3_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce4 = 1'b1;
    end else begin
        exp_table3_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invert_table4_ce0 = 1'b1;
    end else begin
        invert_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_32_fu_227_p0 = exp_table3_q2;

assign add_ln703_32_fu_227_p1 = exp_table3_q4;

assign add_ln703_32_fu_227_p2 = ($signed(add_ln703_32_fu_227_p0) + $signed(add_ln703_32_fu_227_p1));

assign add_ln703_33_fu_233_p1 = exp_table3_q3;

assign add_ln703_33_fu_233_p2 = ($signed(add_ln703_32_fu_227_p2) + $signed(add_ln703_33_fu_233_p1));

assign add_ln703_fu_221_p0 = exp_table3_q0;

assign add_ln703_fu_221_p1 = exp_table3_q1;

assign add_ln703_fu_221_p2 = ($signed(add_ln703_fu_221_p0) + $signed(add_ln703_fu_221_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_fu_354_p2[25:10]}};

assign ap_return_1 = {{mul_ln1118_1_fu_361_p2[25:10]}};

assign ap_return_2 = {{mul_ln1118_2_fu_368_p2[25:10]}};

assign ap_return_3 = {{mul_ln1118_3_fu_375_p2[25:10]}};

assign ap_return_4 = {{mul_ln1118_4_fu_382_p2[25:10]}};

assign exp_sum_V_fu_239_p2 = (add_ln703_33_fu_233_p2 + add_ln703_fu_221_p2);

assign exp_table3_address0 = zext_ln307_fu_156_p1;

assign exp_table3_address1 = zext_ln307_1_fu_171_p1;

assign exp_table3_address2 = zext_ln307_2_fu_186_p1;

assign exp_table3_address3 = zext_ln307_3_fu_201_p1;

assign exp_table3_address4 = zext_ln307_4_fu_216_p1;

assign invert_table4_address0 = zext_ln319_fu_255_p1;

assign mul_ln1118_1_fu_361_p0 = sext_ln1116_fu_260_p1;

assign mul_ln1118_2_fu_368_p0 = sext_ln1116_fu_260_p1;

assign mul_ln1118_3_fu_375_p0 = sext_ln1116_fu_260_p1;

assign mul_ln1118_4_fu_382_p0 = sext_ln1116_fu_260_p1;

assign mul_ln1118_fu_354_p0 = sext_ln1116_fu_260_p1;

assign sext_ln1116_fu_260_p1 = $signed(invert_table4_q0);

assign y_V_1_fu_161_p4 = {{data_1_V_read[15:4]}};

assign y_V_2_fu_176_p4 = {{data_2_V_read[15:4]}};

assign y_V_3_fu_191_p4 = {{data_3_V_read[15:4]}};

assign y_V_4_fu_206_p4 = {{data_4_V_read[15:4]}};

assign y_V_5_fu_245_p4 = {{exp_sum_V_fu_239_p2[15:4]}};

assign y_V_fu_146_p4 = {{data_0_V_read[15:4]}};

assign zext_ln307_1_fu_171_p1 = y_V_1_fu_161_p4;

assign zext_ln307_2_fu_186_p1 = y_V_2_fu_176_p4;

assign zext_ln307_3_fu_201_p1 = y_V_3_fu_191_p4;

assign zext_ln307_4_fu_216_p1 = y_V_4_fu_206_p4;

assign zext_ln307_fu_156_p1 = y_V_fu_146_p4;

assign zext_ln319_fu_255_p1 = y_V_5_fu_245_p4;

endmodule //softmax_latency_ap_fixed_ap_fixed_softmax_config0_s
