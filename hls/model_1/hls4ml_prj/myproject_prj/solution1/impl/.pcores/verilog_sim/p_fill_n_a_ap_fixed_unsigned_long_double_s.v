// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_fill_n_a_ap_fixed_unsigned_long_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [34:0] ap_return_0;
output  [34:0] ap_return_1;
output  [34:0] ap_return_2;
output  [34:0] ap_return_3;
output  [34:0] ap_return_4;
output  [34:0] ap_return_5;
output  [34:0] ap_return_6;
output  [34:0] ap_return_7;
output  [34:0] ap_return_8;
output  [34:0] ap_return_9;
output  [34:0] ap_return_10;
output  [34:0] ap_return_11;
output  [34:0] ap_return_12;
output  [34:0] ap_return_13;
output  [34:0] ap_return_14;
output  [34:0] ap_return_15;
output  [34:0] ap_return_16;
output  [34:0] ap_return_17;
output  [34:0] ap_return_18;
output  [34:0] ap_return_19;
output  [34:0] ap_return_20;
output  [34:0] ap_return_21;
output  [34:0] ap_return_22;
output  [34:0] ap_return_23;
output  [34:0] ap_return_24;
output  [34:0] ap_return_25;
output  [34:0] ap_return_26;
output  [34:0] ap_return_27;
output  [34:0] ap_return_28;
output  [34:0] ap_return_29;
output  [34:0] ap_return_30;
output  [34:0] ap_return_31;
output  [34:0] ap_return_32;
output  [34:0] ap_return_33;
output  [34:0] ap_return_34;
output  [34:0] ap_return_35;
output  [34:0] ap_return_36;
output  [34:0] ap_return_37;
output  [34:0] ap_return_38;
output  [34:0] ap_return_39;
output  [34:0] ap_return_40;
output  [34:0] ap_return_41;
output  [34:0] ap_return_42;
output  [34:0] ap_return_43;
output  [34:0] ap_return_44;
output  [34:0] ap_return_45;
output  [34:0] ap_return_46;
output  [34:0] ap_return_47;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] add_ln744_fu_328_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] p_niter_fu_574_p2;
wire   [0:0] icmp_ln743_fu_322_p2;
reg   [5:0] p_02_rec_reg_300;
reg   [5:0] p_niter_0_reg_311;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln743_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_02_rec_reg_300 <= add_ln744_fu_328_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_02_rec_reg_300 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln743_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_niter_0_reg_311 <= p_niter_fu_574_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_niter_0_reg_311 <= 6'd48;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln743_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln743_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln743_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln744_fu_328_p2 = (p_02_rec_reg_300 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = 35'd0;

assign ap_return_1 = 35'd0;

assign ap_return_10 = 35'd0;

assign ap_return_11 = 35'd0;

assign ap_return_12 = 35'd0;

assign ap_return_13 = 35'd0;

assign ap_return_14 = 35'd0;

assign ap_return_15 = 35'd0;

assign ap_return_16 = 35'd0;

assign ap_return_17 = 35'd0;

assign ap_return_18 = 35'd0;

assign ap_return_19 = 35'd0;

assign ap_return_2 = 35'd0;

assign ap_return_20 = 35'd0;

assign ap_return_21 = 35'd0;

assign ap_return_22 = 35'd0;

assign ap_return_23 = 35'd0;

assign ap_return_24 = 35'd0;

assign ap_return_25 = 35'd0;

assign ap_return_26 = 35'd0;

assign ap_return_27 = 35'd0;

assign ap_return_28 = 35'd0;

assign ap_return_29 = 35'd0;

assign ap_return_3 = 35'd0;

assign ap_return_30 = 35'd0;

assign ap_return_31 = 35'd0;

assign ap_return_32 = 35'd0;

assign ap_return_33 = 35'd0;

assign ap_return_34 = 35'd0;

assign ap_return_35 = 35'd0;

assign ap_return_36 = 35'd0;

assign ap_return_37 = 35'd0;

assign ap_return_38 = 35'd0;

assign ap_return_39 = 35'd0;

assign ap_return_4 = 35'd0;

assign ap_return_40 = 35'd0;

assign ap_return_41 = 35'd0;

assign ap_return_42 = 35'd0;

assign ap_return_43 = 35'd0;

assign ap_return_44 = 35'd0;

assign ap_return_45 = 35'd0;

assign ap_return_46 = 35'd0;

assign ap_return_47 = 35'd0;

assign ap_return_5 = 35'd0;

assign ap_return_6 = 35'd0;

assign ap_return_7 = 35'd0;

assign ap_return_8 = 35'd0;

assign ap_return_9 = 35'd0;

assign icmp_ln743_fu_322_p2 = ((p_niter_0_reg_311 == 6'd0) ? 1'b1 : 1'b0);

assign p_niter_fu_574_p2 = (p_niter_0_reg_311 + 6'd63);

endmodule //p_fill_n_a_ap_fixed_unsigned_long_double_s
