// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module join_equally_ap_fixed_35_15_5_3_0_2ul_48ul_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_0_0_V_read,
        data_0_1_V_read,
        data_1_0_V_read,
        data_1_1_V_read,
        data_2_0_V_read,
        data_2_1_V_read,
        data_3_0_V_read,
        data_3_1_V_read,
        data_4_0_V_read,
        data_4_1_V_read,
        data_5_0_V_read,
        data_5_1_V_read,
        data_6_0_V_read,
        data_6_1_V_read,
        data_7_0_V_read,
        data_7_1_V_read,
        data_8_0_V_read,
        data_8_1_V_read,
        data_9_0_V_read,
        data_9_1_V_read,
        data_10_0_V_read,
        data_10_1_V_read,
        data_11_0_V_read,
        data_11_1_V_read,
        data_12_0_V_read,
        data_12_1_V_read,
        data_13_0_V_read,
        data_13_1_V_read,
        data_14_0_V_read,
        data_14_1_V_read,
        data_15_0_V_read,
        data_15_1_V_read,
        data_16_0_V_read,
        data_16_1_V_read,
        data_17_0_V_read,
        data_17_1_V_read,
        data_18_0_V_read,
        data_18_1_V_read,
        data_19_0_V_read,
        data_19_1_V_read,
        data_20_0_V_read,
        data_20_1_V_read,
        data_21_0_V_read,
        data_21_1_V_read,
        data_22_0_V_read,
        data_22_1_V_read,
        data_23_0_V_read,
        data_23_1_V_read,
        data_24_0_V_read,
        data_24_1_V_read,
        data_25_0_V_read,
        data_25_1_V_read,
        data_26_0_V_read,
        data_26_1_V_read,
        data_27_0_V_read,
        data_27_1_V_read,
        data_28_0_V_read,
        data_28_1_V_read,
        data_29_0_V_read,
        data_29_1_V_read,
        data_30_0_V_read,
        data_30_1_V_read,
        data_31_0_V_read,
        data_31_1_V_read,
        data_32_0_V_read,
        data_32_1_V_read,
        data_33_0_V_read,
        data_33_1_V_read,
        data_34_0_V_read,
        data_34_1_V_read,
        data_35_0_V_read,
        data_35_1_V_read,
        data_36_0_V_read,
        data_36_1_V_read,
        data_37_0_V_read,
        data_37_1_V_read,
        data_38_0_V_read,
        data_38_1_V_read,
        data_39_0_V_read,
        data_39_1_V_read,
        data_40_0_V_read,
        data_40_1_V_read,
        data_41_0_V_read,
        data_41_1_V_read,
        data_42_0_V_read,
        data_42_1_V_read,
        data_43_0_V_read,
        data_43_1_V_read,
        data_44_0_V_read,
        data_44_1_V_read,
        data_45_0_V_read,
        data_45_1_V_read,
        data_46_0_V_read,
        data_46_1_V_read,
        data_47_0_V_read,
        data_47_1_V_read,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0,
        res_V_address1,
        res_V_ce1,
        res_V_we1,
        res_V_d1
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [34:0] data_0_0_V_read;
input  [34:0] data_0_1_V_read;
input  [34:0] data_1_0_V_read;
input  [34:0] data_1_1_V_read;
input  [34:0] data_2_0_V_read;
input  [34:0] data_2_1_V_read;
input  [34:0] data_3_0_V_read;
input  [34:0] data_3_1_V_read;
input  [34:0] data_4_0_V_read;
input  [34:0] data_4_1_V_read;
input  [34:0] data_5_0_V_read;
input  [34:0] data_5_1_V_read;
input  [34:0] data_6_0_V_read;
input  [34:0] data_6_1_V_read;
input  [34:0] data_7_0_V_read;
input  [34:0] data_7_1_V_read;
input  [34:0] data_8_0_V_read;
input  [34:0] data_8_1_V_read;
input  [34:0] data_9_0_V_read;
input  [34:0] data_9_1_V_read;
input  [34:0] data_10_0_V_read;
input  [34:0] data_10_1_V_read;
input  [34:0] data_11_0_V_read;
input  [34:0] data_11_1_V_read;
input  [34:0] data_12_0_V_read;
input  [34:0] data_12_1_V_read;
input  [34:0] data_13_0_V_read;
input  [34:0] data_13_1_V_read;
input  [34:0] data_14_0_V_read;
input  [34:0] data_14_1_V_read;
input  [34:0] data_15_0_V_read;
input  [34:0] data_15_1_V_read;
input  [34:0] data_16_0_V_read;
input  [34:0] data_16_1_V_read;
input  [34:0] data_17_0_V_read;
input  [34:0] data_17_1_V_read;
input  [34:0] data_18_0_V_read;
input  [34:0] data_18_1_V_read;
input  [34:0] data_19_0_V_read;
input  [34:0] data_19_1_V_read;
input  [34:0] data_20_0_V_read;
input  [34:0] data_20_1_V_read;
input  [34:0] data_21_0_V_read;
input  [34:0] data_21_1_V_read;
input  [34:0] data_22_0_V_read;
input  [34:0] data_22_1_V_read;
input  [34:0] data_23_0_V_read;
input  [34:0] data_23_1_V_read;
input  [34:0] data_24_0_V_read;
input  [34:0] data_24_1_V_read;
input  [34:0] data_25_0_V_read;
input  [34:0] data_25_1_V_read;
input  [34:0] data_26_0_V_read;
input  [34:0] data_26_1_V_read;
input  [34:0] data_27_0_V_read;
input  [34:0] data_27_1_V_read;
input  [34:0] data_28_0_V_read;
input  [34:0] data_28_1_V_read;
input  [34:0] data_29_0_V_read;
input  [34:0] data_29_1_V_read;
input  [34:0] data_30_0_V_read;
input  [34:0] data_30_1_V_read;
input  [34:0] data_31_0_V_read;
input  [34:0] data_31_1_V_read;
input  [34:0] data_32_0_V_read;
input  [34:0] data_32_1_V_read;
input  [34:0] data_33_0_V_read;
input  [34:0] data_33_1_V_read;
input  [34:0] data_34_0_V_read;
input  [34:0] data_34_1_V_read;
input  [34:0] data_35_0_V_read;
input  [34:0] data_35_1_V_read;
input  [34:0] data_36_0_V_read;
input  [34:0] data_36_1_V_read;
input  [34:0] data_37_0_V_read;
input  [34:0] data_37_1_V_read;
input  [34:0] data_38_0_V_read;
input  [34:0] data_38_1_V_read;
input  [34:0] data_39_0_V_read;
input  [34:0] data_39_1_V_read;
input  [34:0] data_40_0_V_read;
input  [34:0] data_40_1_V_read;
input  [34:0] data_41_0_V_read;
input  [34:0] data_41_1_V_read;
input  [34:0] data_42_0_V_read;
input  [34:0] data_42_1_V_read;
input  [34:0] data_43_0_V_read;
input  [34:0] data_43_1_V_read;
input  [34:0] data_44_0_V_read;
input  [34:0] data_44_1_V_read;
input  [34:0] data_45_0_V_read;
input  [34:0] data_45_1_V_read;
input  [34:0] data_46_0_V_read;
input  [34:0] data_46_1_V_read;
input  [34:0] data_47_0_V_read;
input  [34:0] data_47_1_V_read;
output  [6:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [34:0] res_V_d0;
output  [6:0] res_V_address1;
output   res_V_ce1;
output   res_V_we1;
output  [34:0] res_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] res_V_address0;
reg res_V_ce0;
reg res_V_we0;
reg[34:0] res_V_d0;
reg[6:0] res_V_address1;
reg res_V_ce1;
reg res_V_we1;
reg[34:0] res_V_d1;

(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [34:0] ap_port_reg_data_1_0_V_read;
reg   [34:0] ap_port_reg_data_1_1_V_read;
reg   [34:0] ap_port_reg_data_2_0_V_read;
reg   [34:0] ap_port_reg_data_2_1_V_read;
reg   [34:0] ap_port_reg_data_3_0_V_read;
reg   [34:0] ap_port_reg_data_3_1_V_read;
reg   [34:0] ap_port_reg_data_4_0_V_read;
reg   [34:0] ap_port_reg_data_4_1_V_read;
reg   [34:0] ap_port_reg_data_5_0_V_read;
reg   [34:0] ap_port_reg_data_5_1_V_read;
reg   [34:0] ap_port_reg_data_6_0_V_read;
reg   [34:0] ap_port_reg_data_6_1_V_read;
reg   [34:0] ap_port_reg_data_7_0_V_read;
reg   [34:0] ap_port_reg_data_7_1_V_read;
reg   [34:0] ap_port_reg_data_8_0_V_read;
reg   [34:0] ap_port_reg_data_8_1_V_read;
reg   [34:0] ap_port_reg_data_9_0_V_read;
reg   [34:0] ap_port_reg_data_9_1_V_read;
reg   [34:0] ap_port_reg_data_10_0_V_read;
reg   [34:0] ap_port_reg_data_10_1_V_read;
reg   [34:0] ap_port_reg_data_11_0_V_read;
reg   [34:0] ap_port_reg_data_11_1_V_read;
reg   [34:0] ap_port_reg_data_12_0_V_read;
reg   [34:0] ap_port_reg_data_12_1_V_read;
reg   [34:0] ap_port_reg_data_13_0_V_read;
reg   [34:0] ap_port_reg_data_13_1_V_read;
reg   [34:0] ap_port_reg_data_14_0_V_read;
reg   [34:0] ap_port_reg_data_14_1_V_read;
reg   [34:0] ap_port_reg_data_15_0_V_read;
reg   [34:0] ap_port_reg_data_15_1_V_read;
reg   [34:0] ap_port_reg_data_16_0_V_read;
reg   [34:0] ap_port_reg_data_16_1_V_read;
reg   [34:0] ap_port_reg_data_17_0_V_read;
reg   [34:0] ap_port_reg_data_17_1_V_read;
reg   [34:0] ap_port_reg_data_18_0_V_read;
reg   [34:0] ap_port_reg_data_18_1_V_read;
reg   [34:0] ap_port_reg_data_19_0_V_read;
reg   [34:0] ap_port_reg_data_19_1_V_read;
reg   [34:0] ap_port_reg_data_20_0_V_read;
reg   [34:0] ap_port_reg_data_20_1_V_read;
reg   [34:0] ap_port_reg_data_21_0_V_read;
reg   [34:0] ap_port_reg_data_21_1_V_read;
reg   [34:0] ap_port_reg_data_22_0_V_read;
reg   [34:0] ap_port_reg_data_22_1_V_read;
reg   [34:0] ap_port_reg_data_23_0_V_read;
reg   [34:0] ap_port_reg_data_23_1_V_read;
reg   [34:0] ap_port_reg_data_24_0_V_read;
reg   [34:0] ap_port_reg_data_24_1_V_read;
reg   [34:0] ap_port_reg_data_25_0_V_read;
reg   [34:0] ap_port_reg_data_25_1_V_read;
reg   [34:0] ap_port_reg_data_26_0_V_read;
reg   [34:0] ap_port_reg_data_26_1_V_read;
reg   [34:0] ap_port_reg_data_27_0_V_read;
reg   [34:0] ap_port_reg_data_27_1_V_read;
reg   [34:0] ap_port_reg_data_28_0_V_read;
reg   [34:0] ap_port_reg_data_28_1_V_read;
reg   [34:0] ap_port_reg_data_29_0_V_read;
reg   [34:0] ap_port_reg_data_29_1_V_read;
reg   [34:0] ap_port_reg_data_30_0_V_read;
reg   [34:0] ap_port_reg_data_30_1_V_read;
reg   [34:0] ap_port_reg_data_31_0_V_read;
reg   [34:0] ap_port_reg_data_31_1_V_read;
reg   [34:0] ap_port_reg_data_32_0_V_read;
reg   [34:0] ap_port_reg_data_32_1_V_read;
reg   [34:0] ap_port_reg_data_33_0_V_read;
reg   [34:0] ap_port_reg_data_33_1_V_read;
reg   [34:0] ap_port_reg_data_34_0_V_read;
reg   [34:0] ap_port_reg_data_34_1_V_read;
reg   [34:0] ap_port_reg_data_35_0_V_read;
reg   [34:0] ap_port_reg_data_35_1_V_read;
reg   [34:0] ap_port_reg_data_36_0_V_read;
reg   [34:0] ap_port_reg_data_36_1_V_read;
reg   [34:0] ap_port_reg_data_37_0_V_read;
reg   [34:0] ap_port_reg_data_37_1_V_read;
reg   [34:0] ap_port_reg_data_38_0_V_read;
reg   [34:0] ap_port_reg_data_38_1_V_read;
reg   [34:0] ap_port_reg_data_39_0_V_read;
reg   [34:0] ap_port_reg_data_39_1_V_read;
reg   [34:0] ap_port_reg_data_40_0_V_read;
reg   [34:0] ap_port_reg_data_40_1_V_read;
reg   [34:0] ap_port_reg_data_41_0_V_read;
reg   [34:0] ap_port_reg_data_41_1_V_read;
reg   [34:0] ap_port_reg_data_42_0_V_read;
reg   [34:0] ap_port_reg_data_42_1_V_read;
reg   [34:0] ap_port_reg_data_43_0_V_read;
reg   [34:0] ap_port_reg_data_43_1_V_read;
reg   [34:0] ap_port_reg_data_44_0_V_read;
reg   [34:0] ap_port_reg_data_44_1_V_read;
reg   [34:0] ap_port_reg_data_45_0_V_read;
reg   [34:0] ap_port_reg_data_45_1_V_read;
reg   [34:0] ap_port_reg_data_46_0_V_read;
reg   [34:0] ap_port_reg_data_46_1_V_read;
reg   [34:0] ap_port_reg_data_47_0_V_read;
reg   [34:0] ap_port_reg_data_47_1_V_read;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
reg   [47:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_data_10_0_V_read <= data_10_0_V_read;
        ap_port_reg_data_10_1_V_read <= data_10_1_V_read;
        ap_port_reg_data_11_0_V_read <= data_11_0_V_read;
        ap_port_reg_data_11_1_V_read <= data_11_1_V_read;
        ap_port_reg_data_12_0_V_read <= data_12_0_V_read;
        ap_port_reg_data_12_1_V_read <= data_12_1_V_read;
        ap_port_reg_data_13_0_V_read <= data_13_0_V_read;
        ap_port_reg_data_13_1_V_read <= data_13_1_V_read;
        ap_port_reg_data_14_0_V_read <= data_14_0_V_read;
        ap_port_reg_data_14_1_V_read <= data_14_1_V_read;
        ap_port_reg_data_15_0_V_read <= data_15_0_V_read;
        ap_port_reg_data_15_1_V_read <= data_15_1_V_read;
        ap_port_reg_data_16_0_V_read <= data_16_0_V_read;
        ap_port_reg_data_16_1_V_read <= data_16_1_V_read;
        ap_port_reg_data_17_0_V_read <= data_17_0_V_read;
        ap_port_reg_data_17_1_V_read <= data_17_1_V_read;
        ap_port_reg_data_18_0_V_read <= data_18_0_V_read;
        ap_port_reg_data_18_1_V_read <= data_18_1_V_read;
        ap_port_reg_data_19_0_V_read <= data_19_0_V_read;
        ap_port_reg_data_19_1_V_read <= data_19_1_V_read;
        ap_port_reg_data_1_0_V_read <= data_1_0_V_read;
        ap_port_reg_data_1_1_V_read <= data_1_1_V_read;
        ap_port_reg_data_20_0_V_read <= data_20_0_V_read;
        ap_port_reg_data_20_1_V_read <= data_20_1_V_read;
        ap_port_reg_data_21_0_V_read <= data_21_0_V_read;
        ap_port_reg_data_21_1_V_read <= data_21_1_V_read;
        ap_port_reg_data_22_0_V_read <= data_22_0_V_read;
        ap_port_reg_data_22_1_V_read <= data_22_1_V_read;
        ap_port_reg_data_23_0_V_read <= data_23_0_V_read;
        ap_port_reg_data_23_1_V_read <= data_23_1_V_read;
        ap_port_reg_data_24_0_V_read <= data_24_0_V_read;
        ap_port_reg_data_24_1_V_read <= data_24_1_V_read;
        ap_port_reg_data_25_0_V_read <= data_25_0_V_read;
        ap_port_reg_data_25_1_V_read <= data_25_1_V_read;
        ap_port_reg_data_26_0_V_read <= data_26_0_V_read;
        ap_port_reg_data_26_1_V_read <= data_26_1_V_read;
        ap_port_reg_data_27_0_V_read <= data_27_0_V_read;
        ap_port_reg_data_27_1_V_read <= data_27_1_V_read;
        ap_port_reg_data_28_0_V_read <= data_28_0_V_read;
        ap_port_reg_data_28_1_V_read <= data_28_1_V_read;
        ap_port_reg_data_29_0_V_read <= data_29_0_V_read;
        ap_port_reg_data_29_1_V_read <= data_29_1_V_read;
        ap_port_reg_data_2_0_V_read <= data_2_0_V_read;
        ap_port_reg_data_2_1_V_read <= data_2_1_V_read;
        ap_port_reg_data_30_0_V_read <= data_30_0_V_read;
        ap_port_reg_data_30_1_V_read <= data_30_1_V_read;
        ap_port_reg_data_31_0_V_read <= data_31_0_V_read;
        ap_port_reg_data_31_1_V_read <= data_31_1_V_read;
        ap_port_reg_data_32_0_V_read <= data_32_0_V_read;
        ap_port_reg_data_32_1_V_read <= data_32_1_V_read;
        ap_port_reg_data_33_0_V_read <= data_33_0_V_read;
        ap_port_reg_data_33_1_V_read <= data_33_1_V_read;
        ap_port_reg_data_34_0_V_read <= data_34_0_V_read;
        ap_port_reg_data_34_1_V_read <= data_34_1_V_read;
        ap_port_reg_data_35_0_V_read <= data_35_0_V_read;
        ap_port_reg_data_35_1_V_read <= data_35_1_V_read;
        ap_port_reg_data_36_0_V_read <= data_36_0_V_read;
        ap_port_reg_data_36_1_V_read <= data_36_1_V_read;
        ap_port_reg_data_37_0_V_read <= data_37_0_V_read;
        ap_port_reg_data_37_1_V_read <= data_37_1_V_read;
        ap_port_reg_data_38_0_V_read <= data_38_0_V_read;
        ap_port_reg_data_38_1_V_read <= data_38_1_V_read;
        ap_port_reg_data_39_0_V_read <= data_39_0_V_read;
        ap_port_reg_data_39_1_V_read <= data_39_1_V_read;
        ap_port_reg_data_3_0_V_read <= data_3_0_V_read;
        ap_port_reg_data_3_1_V_read <= data_3_1_V_read;
        ap_port_reg_data_40_0_V_read <= data_40_0_V_read;
        ap_port_reg_data_40_1_V_read <= data_40_1_V_read;
        ap_port_reg_data_41_0_V_read <= data_41_0_V_read;
        ap_port_reg_data_41_1_V_read <= data_41_1_V_read;
        ap_port_reg_data_42_0_V_read <= data_42_0_V_read;
        ap_port_reg_data_42_1_V_read <= data_42_1_V_read;
        ap_port_reg_data_43_0_V_read <= data_43_0_V_read;
        ap_port_reg_data_43_1_V_read <= data_43_1_V_read;
        ap_port_reg_data_44_0_V_read <= data_44_0_V_read;
        ap_port_reg_data_44_1_V_read <= data_44_1_V_read;
        ap_port_reg_data_45_0_V_read <= data_45_0_V_read;
        ap_port_reg_data_45_1_V_read <= data_45_1_V_read;
        ap_port_reg_data_46_0_V_read <= data_46_0_V_read;
        ap_port_reg_data_46_1_V_read <= data_46_1_V_read;
        ap_port_reg_data_47_0_V_read <= data_47_0_V_read;
        ap_port_reg_data_47_1_V_read <= data_47_1_V_read;
        ap_port_reg_data_4_0_V_read <= data_4_0_V_read;
        ap_port_reg_data_4_1_V_read <= data_4_1_V_read;
        ap_port_reg_data_5_0_V_read <= data_5_0_V_read;
        ap_port_reg_data_5_1_V_read <= data_5_1_V_read;
        ap_port_reg_data_6_0_V_read <= data_6_0_V_read;
        ap_port_reg_data_6_1_V_read <= data_6_1_V_read;
        ap_port_reg_data_7_0_V_read <= data_7_0_V_read;
        ap_port_reg_data_7_1_V_read <= data_7_1_V_read;
        ap_port_reg_data_8_0_V_read <= data_8_0_V_read;
        ap_port_reg_data_8_1_V_read <= data_8_1_V_read;
        ap_port_reg_data_9_0_V_read <= data_9_0_V_read;
        ap_port_reg_data_9_1_V_read <= data_9_1_V_read;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_V_address0 = 64'd94;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        res_V_address0 = 64'd92;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_V_address0 = 64'd90;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        res_V_address0 = 64'd88;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        res_V_address0 = 64'd86;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        res_V_address0 = 64'd84;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        res_V_address0 = 64'd82;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        res_V_address0 = 64'd80;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        res_V_address0 = 64'd78;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        res_V_address0 = 64'd76;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        res_V_address0 = 64'd74;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        res_V_address0 = 64'd72;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        res_V_address0 = 64'd70;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        res_V_address0 = 64'd68;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        res_V_address0 = 64'd66;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        res_V_address0 = 64'd64;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_address0 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_address0 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        res_V_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        res_V_address0 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        res_V_address0 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        res_V_address0 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        res_V_address0 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        res_V_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        res_V_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        res_V_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        res_V_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        res_V_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        res_V_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_V_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        res_V_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        res_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        res_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        res_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        res_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        res_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        res_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        res_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        res_V_address0 = 64'd0;
    end else begin
        res_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_V_address1 = 64'd95;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        res_V_address1 = 64'd93;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_V_address1 = 64'd91;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        res_V_address1 = 64'd89;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        res_V_address1 = 64'd87;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        res_V_address1 = 64'd85;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        res_V_address1 = 64'd83;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        res_V_address1 = 64'd81;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        res_V_address1 = 64'd79;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        res_V_address1 = 64'd77;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        res_V_address1 = 64'd75;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        res_V_address1 = 64'd73;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        res_V_address1 = 64'd71;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        res_V_address1 = 64'd69;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        res_V_address1 = 64'd67;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        res_V_address1 = 64'd65;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_address1 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_address1 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        res_V_address1 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        res_V_address1 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        res_V_address1 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        res_V_address1 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        res_V_address1 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        res_V_address1 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        res_V_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        res_V_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        res_V_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        res_V_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        res_V_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_V_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        res_V_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        res_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        res_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        res_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        res_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        res_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        res_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        res_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        res_V_address1 = 64'd1;
    end else begin
        res_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_V_ce1 = 1'b1;
    end else begin
        res_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_V_d0 = ap_port_reg_data_47_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        res_V_d0 = ap_port_reg_data_46_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_V_d0 = ap_port_reg_data_45_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        res_V_d0 = ap_port_reg_data_44_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        res_V_d0 = ap_port_reg_data_43_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        res_V_d0 = ap_port_reg_data_42_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        res_V_d0 = ap_port_reg_data_41_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        res_V_d0 = ap_port_reg_data_40_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        res_V_d0 = ap_port_reg_data_39_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        res_V_d0 = ap_port_reg_data_38_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        res_V_d0 = ap_port_reg_data_37_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        res_V_d0 = ap_port_reg_data_36_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        res_V_d0 = ap_port_reg_data_35_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        res_V_d0 = ap_port_reg_data_34_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        res_V_d0 = ap_port_reg_data_33_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        res_V_d0 = ap_port_reg_data_32_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_d0 = ap_port_reg_data_31_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_d0 = ap_port_reg_data_30_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_d0 = ap_port_reg_data_29_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        res_V_d0 = ap_port_reg_data_28_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        res_V_d0 = ap_port_reg_data_27_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        res_V_d0 = ap_port_reg_data_26_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        res_V_d0 = ap_port_reg_data_25_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        res_V_d0 = ap_port_reg_data_24_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        res_V_d0 = ap_port_reg_data_23_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        res_V_d0 = ap_port_reg_data_22_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        res_V_d0 = ap_port_reg_data_21_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        res_V_d0 = ap_port_reg_data_20_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        res_V_d0 = ap_port_reg_data_19_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        res_V_d0 = ap_port_reg_data_18_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_V_d0 = ap_port_reg_data_17_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        res_V_d0 = ap_port_reg_data_16_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_d0 = ap_port_reg_data_15_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        res_V_d0 = ap_port_reg_data_14_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        res_V_d0 = ap_port_reg_data_13_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_d0 = ap_port_reg_data_12_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_d0 = ap_port_reg_data_11_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_d0 = ap_port_reg_data_10_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        res_V_d0 = ap_port_reg_data_9_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        res_V_d0 = ap_port_reg_data_8_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        res_V_d0 = ap_port_reg_data_7_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        res_V_d0 = ap_port_reg_data_6_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        res_V_d0 = ap_port_reg_data_5_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_d0 = ap_port_reg_data_4_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_V_d0 = ap_port_reg_data_3_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_V_d0 = ap_port_reg_data_2_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_V_d0 = ap_port_reg_data_1_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        res_V_d0 = data_0_0_V_read;
    end else begin
        res_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_V_d1 = ap_port_reg_data_47_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        res_V_d1 = ap_port_reg_data_46_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_V_d1 = ap_port_reg_data_45_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        res_V_d1 = ap_port_reg_data_44_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        res_V_d1 = ap_port_reg_data_43_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        res_V_d1 = ap_port_reg_data_42_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        res_V_d1 = ap_port_reg_data_41_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        res_V_d1 = ap_port_reg_data_40_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        res_V_d1 = ap_port_reg_data_39_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        res_V_d1 = ap_port_reg_data_38_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        res_V_d1 = ap_port_reg_data_37_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        res_V_d1 = ap_port_reg_data_36_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        res_V_d1 = ap_port_reg_data_35_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        res_V_d1 = ap_port_reg_data_34_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        res_V_d1 = ap_port_reg_data_33_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        res_V_d1 = ap_port_reg_data_32_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_d1 = ap_port_reg_data_31_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_d1 = ap_port_reg_data_30_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_d1 = ap_port_reg_data_29_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        res_V_d1 = ap_port_reg_data_28_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        res_V_d1 = ap_port_reg_data_27_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        res_V_d1 = ap_port_reg_data_26_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        res_V_d1 = ap_port_reg_data_25_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        res_V_d1 = ap_port_reg_data_24_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        res_V_d1 = ap_port_reg_data_23_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        res_V_d1 = ap_port_reg_data_22_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        res_V_d1 = ap_port_reg_data_21_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        res_V_d1 = ap_port_reg_data_20_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        res_V_d1 = ap_port_reg_data_19_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        res_V_d1 = ap_port_reg_data_18_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_V_d1 = ap_port_reg_data_17_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        res_V_d1 = ap_port_reg_data_16_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_d1 = ap_port_reg_data_15_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        res_V_d1 = ap_port_reg_data_14_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        res_V_d1 = ap_port_reg_data_13_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_d1 = ap_port_reg_data_12_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_d1 = ap_port_reg_data_11_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_d1 = ap_port_reg_data_10_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        res_V_d1 = ap_port_reg_data_9_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        res_V_d1 = ap_port_reg_data_8_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        res_V_d1 = ap_port_reg_data_7_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        res_V_d1 = ap_port_reg_data_6_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        res_V_d1 = ap_port_reg_data_5_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_d1 = ap_port_reg_data_4_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_V_d1 = ap_port_reg_data_3_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_V_d1 = ap_port_reg_data_2_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_V_d1 = ap_port_reg_data_1_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        res_V_d1 = data_0_1_V_read;
    end else begin
        res_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_V_we1 = 1'b1;
    end else begin
        res_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

endmodule //join_equally_ap_fixed_35_15_5_3_0_2ul_48ul_s
