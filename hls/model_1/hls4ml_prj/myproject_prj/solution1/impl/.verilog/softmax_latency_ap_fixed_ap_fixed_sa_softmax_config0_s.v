// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_ap_fixed_ap_fixed_sa_softmax_config0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        data_V_address1,
        data_V_ce1,
        data_V_q1,
        data_V_offset,
        data_V_offset1,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0,
        res_V_address1,
        res_V_ce1,
        res_V_we1,
        res_V_d1,
        res_V_offset,
        res_V_offset3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [2:0] data_V_address0;
output   data_V_ce0;
input  [15:0] data_V_q0;
output  [2:0] data_V_address1;
output   data_V_ce1;
input  [15:0] data_V_q1;
input  [0:0] data_V_offset;
input  [0:0] data_V_offset1;
output  [2:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [31:0] res_V_d0;
output  [2:0] res_V_address1;
output   res_V_ce1;
output   res_V_we1;
output  [31:0] res_V_d1;
input  [0:0] res_V_offset;
input  [0:0] res_V_offset3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg data_V_ce1;
reg res_V_ce0;
reg res_V_we0;
reg res_V_ce1;
reg res_V_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] exp_table13_address0;
reg    exp_table13_ce0;
wire   [15:0] exp_table13_q0;
wire   [11:0] exp_table13_address1;
reg    exp_table13_ce1;
wire   [15:0] exp_table13_q1;
wire   [11:0] invert_table15_address0;
reg    invert_table15_ce0;
wire   [15:0] invert_table15_q0;
reg   [0:0] res_V_offset3_read_reg_291;
reg   [0:0] res_V_offset3_read_reg_291_pp0_iter1_reg;
reg   [0:0] res_V_offset3_read_reg_291_pp0_iter2_reg;
reg   [0:0] res_V_offset_read_reg_296;
reg   [0:0] res_V_offset_read_reg_296_pp0_iter1_reg;
reg   [0:0] res_V_offset_read_reg_296_pp0_iter2_reg;
reg  signed [15:0] exp_res_0_V_reg_321;
reg  signed [15:0] exp_res_1_V_reg_326;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln306_fu_168_p1;
wire   [63:0] tmp_3_fu_179_p3;
wire   [63:0] zext_ln307_fu_198_p1;
wire   [63:0] zext_ln307_1_fu_213_p1;
wire   [63:0] zext_ln319_fu_234_p1;
wire   [63:0] zext_ln203_fu_247_p1;
wire   [63:0] tmp_1_fu_258_p3;
wire  signed [31:0] mul_ln1118_fu_277_p2;
wire  signed [31:0] mul_ln1118_1_fu_284_p2;
wire   [2:0] tmp_2_fu_158_p4;
wire   [2:0] or_ln306_fu_173_p2;
wire   [11:0] y_V_fu_188_p4;
wire   [11:0] y_V_6_fu_203_p4;
wire  signed [15:0] exp_sum_V_fu_218_p0;
wire  signed [15:0] exp_sum_V_fu_218_p1;
wire   [15:0] exp_sum_V_fu_218_p2;
wire   [11:0] y_V_7_fu_224_p4;
wire   [2:0] tmp_fu_239_p4;
wire   [2:0] or_ln203_fu_252_p2;
wire  signed [15:0] mul_ln1118_fu_277_p1;
wire  signed [31:0] sext_ln1118_fu_267_p1;
wire  signed [15:0] mul_ln1118_1_fu_284_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

softmax_latency_ap_fixed_ap_fixed_sa_softmax_config0_s_exbkb #(
    .DataWidth( 16 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
exp_table13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table13_address0),
    .ce0(exp_table13_ce0),
    .q0(exp_table13_q0),
    .address1(exp_table13_address1),
    .ce1(exp_table13_ce1),
    .q1(exp_table13_q1)
);

softmax_latency_ap_fixed_ap_fixed_sa_softmax_config0_s_incud #(
    .DataWidth( 16 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
invert_table15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table15_address0),
    .ce0(invert_table15_ce0),
    .q0(invert_table15_q0)
);

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U410(
    .din0(exp_res_0_V_reg_321),
    .din1(mul_ln1118_fu_277_p1),
    .dout(mul_ln1118_fu_277_p2)
);

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U411(
    .din0(exp_res_1_V_reg_326),
    .din1(mul_ln1118_1_fu_284_p1),
    .dout(mul_ln1118_1_fu_284_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_321 <= exp_table13_q0;
        exp_res_1_V_reg_326 <= exp_table13_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_offset3_read_reg_291 <= res_V_offset3;
        res_V_offset3_read_reg_291_pp0_iter1_reg <= res_V_offset3_read_reg_291;
        res_V_offset_read_reg_296 <= res_V_offset;
        res_V_offset_read_reg_296_pp0_iter1_reg <= res_V_offset_read_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_offset3_read_reg_291_pp0_iter2_reg <= res_V_offset3_read_reg_291_pp0_iter1_reg;
        res_V_offset_read_reg_296_pp0_iter2_reg <= res_V_offset_read_reg_296_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_ce1 = 1'b1;
    end else begin
        data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table13_ce0 = 1'b1;
    end else begin
        exp_table13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table13_ce1 = 1'b1;
    end else begin
        exp_table13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        invert_table15_ce0 = 1'b1;
    end else begin
        invert_table15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_ce1 = 1'b1;
    end else begin
        res_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_we1 = 1'b1;
    end else begin
        res_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign data_V_address0 = zext_ln306_fu_168_p1;

assign data_V_address1 = tmp_3_fu_179_p3;

assign exp_sum_V_fu_218_p0 = exp_table13_q1;

assign exp_sum_V_fu_218_p1 = exp_table13_q0;

assign exp_sum_V_fu_218_p2 = ($signed(exp_sum_V_fu_218_p0) + $signed(exp_sum_V_fu_218_p1));

assign exp_table13_address0 = zext_ln307_fu_198_p1;

assign exp_table13_address1 = zext_ln307_1_fu_213_p1;

assign invert_table15_address0 = zext_ln319_fu_234_p1;

assign mul_ln1118_1_fu_284_p1 = sext_ln1118_fu_267_p1;

assign mul_ln1118_fu_277_p1 = sext_ln1118_fu_267_p1;

assign or_ln203_fu_252_p2 = (tmp_fu_239_p4 | 3'd1);

assign or_ln306_fu_173_p2 = (tmp_2_fu_158_p4 | 3'd1);

assign res_V_address0 = zext_ln203_fu_247_p1;

assign res_V_address1 = tmp_1_fu_258_p3;

assign res_V_d0 = mul_ln1118_fu_277_p2;

assign res_V_d1 = mul_ln1118_1_fu_284_p2;

assign sext_ln1118_fu_267_p1 = $signed(invert_table15_q0);

assign tmp_1_fu_258_p3 = {{61'd0}, {or_ln203_fu_252_p2}};

assign tmp_2_fu_158_p4 = {{{data_V_offset}, {data_V_offset1}}, {1'd0}};

assign tmp_3_fu_179_p3 = {{61'd0}, {or_ln306_fu_173_p2}};

assign tmp_fu_239_p4 = {{{res_V_offset_read_reg_296_pp0_iter2_reg}, {res_V_offset3_read_reg_291_pp0_iter2_reg}}, {1'd0}};

assign y_V_6_fu_203_p4 = {{data_V_q1[15:4]}};

assign y_V_7_fu_224_p4 = {{exp_sum_V_fu_218_p2[15:4]}};

assign y_V_fu_188_p4 = {{data_V_q0[15:4]}};

assign zext_ln203_fu_247_p1 = tmp_fu_239_p4;

assign zext_ln306_fu_168_p1 = tmp_2_fu_158_p4;

assign zext_ln307_1_fu_213_p1 = y_V_6_fu_203_p4;

assign zext_ln307_fu_198_p1 = y_V_fu_188_p4;

assign zext_ln319_fu_234_p1 = y_V_7_fu_224_p4;

endmodule //softmax_latency_ap_fixed_ap_fixed_sa_softmax_config0_s
