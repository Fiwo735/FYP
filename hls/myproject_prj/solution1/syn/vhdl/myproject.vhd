-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_V : IN STD_LOGIC_VECTOR (559 downto 0);
    data_in_V_ap_vld : IN STD_LOGIC;
    data_out_0_V : OUT STD_LOGIC_VECTOR (34 downto 0);
    data_out_0_V_ap_vld : OUT STD_LOGIC;
    data_out_1_V : OUT STD_LOGIC_VECTOR (34 downto 0);
    data_out_1_V_ap_vld : OUT STD_LOGIC;
    data_out_2_V : OUT STD_LOGIC_VECTOR (34 downto 0);
    data_out_2_V_ap_vld : OUT STD_LOGIC;
    data_out_3_V : OUT STD_LOGIC_VECTOR (34 downto 0);
    data_out_3_V_ap_vld : OUT STD_LOGIC;
    data_out_4_V : OUT STD_LOGIC_VECTOR (34 downto 0);
    data_out_4_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.358000,HLS_SYN_LAT=2282,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=5035,HLS_SYN_FF=106782,HLS_SYN_LUT=169920,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv560_lc_1 : STD_LOGIC_VECTOR (559 downto
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv16_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_in_V_preg : STD_LOGIC_VECTOR (559 downto
    signal data_in_V_in_sig : STD_LOGIC_VECTOR (559 downto 0);
    signal data_in_V_ap_vld_preg : STD_LOGIC := '0';
    signal data_in_V_ap_vld_in_sig : STD_LOGIC;
    signal data_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal embedded_with_cls_1_V_reg_970 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal embedded_with_cls_3_V_reg_975 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_5_V_reg_980 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_7_V_reg_985 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_9_V_reg_990 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_11_V_reg_995 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_13_V_reg_1000 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_15_V_reg_1005 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_17_V_reg_1010 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_19_V_reg_1015 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_21_V_reg_1020 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_23_V_reg_1025 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_25_V_reg_1030 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_27_V_reg_1035 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_29_V_reg_1040 : STD_LOGIC_VECTOR (34 downto 0);
    signal embedded_with_cls_31_V_reg_1045 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal mlp_out_red_0_V_reg_1210 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal mlp_out_red_1_V_reg_1215 : STD_LOGIC_VECTOR (15 downto 0);
    signal mlp_out_red_2_V_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal mlp_out_red_3_V_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal mlp_out_red_4_V_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal transformer_0_out_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal transformer_0_out_ce0 : STD_LOGIC;
    signal transformer_0_out_we0 : STD_LOGIC;
    signal transformer_0_out_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal transformer_0_out_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal transformer_0_out_ce1 : STD_LOGIC;
    signal transformer_0_out_we1 : STD_LOGIC;
    signal transformer_0_out_q1 : STD_LOGIC_VECTOR (34 downto 0);
    signal mlp_dimensions_reduced_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mlp_dimensions_reduced_V_ce0 : STD_LOGIC;
    signal mlp_dimensions_reduced_V_we0 : STD_LOGIC;
    signal mlp_dimensions_reduced_V_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal mlp_dimensions_reduced_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mlp_dimensions_reduced_V_ce1 : STD_LOGIC;
    signal mlp_dimensions_reduced_V_we1 : STD_LOGIC;
    signal mlp_dimensions_reduced_V_q1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_transformer_fu_759_ap_start : STD_LOGIC;
    signal grp_transformer_fu_759_ap_done : STD_LOGIC;
    signal grp_transformer_fu_759_ap_idle : STD_LOGIC;
    signal grp_transformer_fu_759_ap_ready : STD_LOGIC;
    signal grp_transformer_fu_759_res_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_transformer_fu_759_res_V_ce0 : STD_LOGIC;
    signal grp_transformer_fu_759_res_V_we0 : STD_LOGIC;
    signal grp_transformer_fu_759_res_V_d0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_transformer_fu_759_res_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_transformer_fu_759_res_V_ce1 : STD_LOGIC;
    signal grp_transformer_fu_759_res_V_we1 : STD_LOGIC;
    signal grp_transformer_fu_759_res_V_d1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_4 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_5 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_6 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_7 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_8 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_9 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_10 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_11 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_12 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_13 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_14 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_15 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start : STD_LOGIC;
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done : STD_LOGIC;
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_idle : STD_LOGIC;
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_ready : STD_LOGIC;
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_4 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_done : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_idle : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_ready : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce0 : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce1 : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_4 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_transformer_fu_759_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_NS_fsm_state25 : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";

    component transformer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_1_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (34 downto 0);
        res_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        res_V_ce0 : OUT STD_LOGIC;
        res_V_we0 : OUT STD_LOGIC;
        res_V_d0 : OUT STD_LOGIC_VECTOR (34 downto 0);
        res_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        res_V_ce1 : OUT STD_LOGIC;
        res_V_we1 : OUT STD_LOGIC;
        res_V_d1 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (559 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (34 downto 0);
        data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_V_ce1 : OUT STD_LOGIC;
        data_V_q1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (34 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component myproject_transformer_0_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (34 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (34 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component myproject_mlp_dimensions_reduced_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (34 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (34 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    transformer_0_out_U : component myproject_transformer_0_out
    generic map (
        DataWidth => 35,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transformer_0_out_address0,
        ce0 => transformer_0_out_ce0,
        we0 => transformer_0_out_we0,
        d0 => grp_transformer_fu_759_res_V_d0,
        q0 => transformer_0_out_q0,
        address1 => transformer_0_out_address1,
        ce1 => transformer_0_out_ce1,
        we1 => transformer_0_out_we1,
        d1 => grp_transformer_fu_759_res_V_d1,
        q1 => transformer_0_out_q1);

    mlp_dimensions_reduced_V_U : component myproject_mlp_dimensions_reduced_V
    generic map (
        DataWidth => 35,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mlp_dimensions_reduced_V_address0,
        ce0 => mlp_dimensions_reduced_V_ce0,
        we0 => mlp_dimensions_reduced_V_we0,
        d0 => transformer_0_out_q0,
        q0 => mlp_dimensions_reduced_V_q0,
        address1 => mlp_dimensions_reduced_V_address1,
        ce1 => mlp_dimensions_reduced_V_ce1,
        we1 => mlp_dimensions_reduced_V_we1,
        d1 => transformer_0_out_q1,
        q1 => mlp_dimensions_reduced_V_q1);

    grp_transformer_fu_759 : component transformer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_transformer_fu_759_ap_start,
        ap_done => grp_transformer_fu_759_ap_done,
        ap_idle => grp_transformer_fu_759_ap_idle,
        ap_ready => grp_transformer_fu_759_ap_ready,
        data_1_V_read => embedded_with_cls_1_V_reg_970,
        data_3_V_read => embedded_with_cls_3_V_reg_975,
        data_5_V_read => embedded_with_cls_5_V_reg_980,
        data_7_V_read => embedded_with_cls_7_V_reg_985,
        data_9_V_read => embedded_with_cls_9_V_reg_990,
        data_11_V_read => embedded_with_cls_11_V_reg_995,
        data_13_V_read => embedded_with_cls_13_V_reg_1000,
        data_15_V_read => embedded_with_cls_15_V_reg_1005,
        data_17_V_read => embedded_with_cls_17_V_reg_1010,
        data_19_V_read => embedded_with_cls_19_V_reg_1015,
        data_21_V_read => embedded_with_cls_21_V_reg_1020,
        data_23_V_read => embedded_with_cls_23_V_reg_1025,
        data_25_V_read => embedded_with_cls_25_V_reg_1030,
        data_27_V_read => embedded_with_cls_27_V_reg_1035,
        data_29_V_read => embedded_with_cls_29_V_reg_1040,
        data_31_V_read => embedded_with_cls_31_V_reg_1045,
        res_V_address0 => grp_transformer_fu_759_res_V_address0,
        res_V_ce0 => grp_transformer_fu_759_res_V_ce0,
        res_V_we0 => grp_transformer_fu_759_res_V_we0,
        res_V_d0 => grp_transformer_fu_759_res_V_d0,
        res_V_address1 => grp_transformer_fu_759_res_V_address1,
        res_V_ce1 => grp_transformer_fu_759_res_V_ce1,
        res_V_we1 => grp_transformer_fu_759_res_V_we1,
        res_V_d1 => grp_transformer_fu_759_res_V_d1);

    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784 : component dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => data_in_V_in_sig,
        ap_return_0 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_0,
        ap_return_1 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_1,
        ap_return_2 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_2,
        ap_return_3 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_3,
        ap_return_4 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_4,
        ap_return_5 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_5,
        ap_return_6 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_6,
        ap_return_7 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_7,
        ap_return_8 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_8,
        ap_return_9 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_9,
        ap_return_10 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_10,
        ap_return_11 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_11,
        ap_return_12 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_12,
        ap_return_13 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_13,
        ap_return_14 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_14,
        ap_return_15 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_15);

    grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790 : component log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start,
        ap_done => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done,
        ap_idle => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_idle,
        ap_ready => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_ready,
        data_0_V_read => mlp_out_red_0_V_reg_1210,
        data_1_V_read => mlp_out_red_1_V_reg_1215,
        data_2_V_read => mlp_out_red_2_V_reg_1220,
        data_3_V_read => mlp_out_red_3_V_reg_1225,
        data_4_V_read => mlp_out_red_4_V_reg_1230,
        ap_return_0 => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_0,
        ap_return_1 => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_1,
        ap_return_2 => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_2,
        ap_return_3 => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_3,
        ap_return_4 => grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_4);

    grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801 : component dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start,
        ap_done => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_done,
        ap_idle => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_idle,
        ap_ready => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_ready,
        data_V_address0 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address0,
        data_V_ce0 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce0,
        data_V_q0 => mlp_dimensions_reduced_V_q0,
        data_V_address1 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address1,
        data_V_ce1 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce1,
        data_V_q1 => mlp_dimensions_reduced_V_q1,
        ap_return_0 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_0,
        ap_return_1 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_1,
        ap_return_2 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_2,
        ap_return_3 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_3,
        ap_return_4 => grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    data_in_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_in_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    data_in_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (data_in_V_ap_vld = ap_const_logic_1))) then 
                    data_in_V_ap_vld_preg <= data_in_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    data_in_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_in_V_preg <= ap_const_lv560_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (data_in_V_ap_vld = ap_const_logic_1))) then 
                    data_in_V_preg <= data_in_V;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state25) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_ready = ap_const_logic_1)) then 
                    grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_ready = ap_const_logic_1)) then 
                    grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_transformer_fu_759_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_transformer_fu_759_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_transformer_fu_759_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_transformer_fu_759_ap_ready = ap_const_logic_1)) then 
                    grp_transformer_fu_759_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                embedded_with_cls_11_V_reg_995 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_5;
                embedded_with_cls_13_V_reg_1000 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_6;
                embedded_with_cls_15_V_reg_1005 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_7;
                embedded_with_cls_17_V_reg_1010 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_8;
                embedded_with_cls_19_V_reg_1015 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_9;
                embedded_with_cls_1_V_reg_970 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_0;
                embedded_with_cls_21_V_reg_1020 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_10;
                embedded_with_cls_23_V_reg_1025 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_11;
                embedded_with_cls_25_V_reg_1030 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_12;
                embedded_with_cls_27_V_reg_1035 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_13;
                embedded_with_cls_29_V_reg_1040 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_14;
                embedded_with_cls_31_V_reg_1045 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_15;
                embedded_with_cls_3_V_reg_975 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_1;
                embedded_with_cls_5_V_reg_980 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_2;
                embedded_with_cls_7_V_reg_985 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_3;
                embedded_with_cls_9_V_reg_990 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_2_fu_784_ap_return_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                mlp_out_red_0_V_reg_1210 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_0(25 downto 10);
                mlp_out_red_1_V_reg_1215 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_1(25 downto 10);
                mlp_out_red_2_V_reg_1220 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_2(25 downto 10);
                mlp_out_red_3_V_reg_1225 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_3(25 downto 10);
                mlp_out_red_4_V_reg_1230 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_return_4(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_in_V_ap_vld_in_sig, ap_CS_fsm_state4, grp_transformer_fu_759_ap_done, grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state35)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((data_in_V_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_transformer_fu_759_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state25 <= ap_NS_fsm(24);

    ap_done_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in_1 <= ap_const_lv16_10;

    const_size_in_1_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_5;

    const_size_out_1_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_ap_vld_in_sig_assign_proc : process(data_in_V_ap_vld, data_in_V_ap_vld_preg)
    begin
        if ((data_in_V_ap_vld = ap_const_logic_1)) then 
            data_in_V_ap_vld_in_sig <= data_in_V_ap_vld;
        else 
            data_in_V_ap_vld_in_sig <= data_in_V_ap_vld_preg;
        end if; 
    end process;


    data_in_V_blk_n_assign_proc : process(data_in_V_ap_vld, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_in_V_blk_n <= data_in_V_ap_vld;
        else 
            data_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_in_sig_assign_proc : process(data_in_V, data_in_V_preg, data_in_V_ap_vld)
    begin
        if ((data_in_V_ap_vld = ap_const_logic_1)) then 
            data_in_V_in_sig <= data_in_V;
        else 
            data_in_V_in_sig <= data_in_V_preg;
        end if; 
    end process;

    data_out_0_V <= grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_0;

    data_out_0_V_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            data_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_out_1_V <= grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_1;

    data_out_1_V_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_out_1_V_ap_vld <= ap_const_logic_1;
        else 
            data_out_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_out_2_V <= grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_2;

    data_out_2_V_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_out_2_V_ap_vld <= ap_const_logic_1;
        else 
            data_out_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_out_3_V <= grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_3;

    data_out_3_V_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_out_3_V_ap_vld <= ap_const_logic_1;
        else 
            data_out_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_out_4_V <= grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_return_4;

    data_out_4_V_ap_vld_assign_proc : process(grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done, ap_CS_fsm_state35)
    begin
        if (((grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_out_4_V_ap_vld <= ap_const_logic_1;
        else 
            data_out_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_ap_start_reg;
    grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start <= grp_log_softmax_latency_ap_fixed_ap_fixed_softmax_config0_s_fu_790_ap_start_reg;
    grp_transformer_fu_759_ap_start <= grp_transformer_fu_759_ap_start_reg;

    mlp_dimensions_reduced_V_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address0, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_1E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_1C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_1A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_18(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_16(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_14(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_12(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_10(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mlp_dimensions_reduced_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            mlp_dimensions_reduced_V_address0 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address0;
        else 
            mlp_dimensions_reduced_V_address0 <= "XXXX";
        end if; 
    end process;


    mlp_dimensions_reduced_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address1, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_1F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_1D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_1B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_19(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_17(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_15(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_13(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_11(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mlp_dimensions_reduced_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            mlp_dimensions_reduced_V_address1 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_address1;
        else 
            mlp_dimensions_reduced_V_address1 <= "XXXX";
        end if; 
    end process;


    mlp_dimensions_reduced_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce0, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mlp_dimensions_reduced_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            mlp_dimensions_reduced_V_ce0 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce0;
        else 
            mlp_dimensions_reduced_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mlp_dimensions_reduced_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce1, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mlp_dimensions_reduced_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            mlp_dimensions_reduced_V_ce1 <= grp_dense_latency_ap_fixed_ap_fixed_mlp_config_0_0_0_0_0_0_fu_801_data_V_ce1;
        else 
            mlp_dimensions_reduced_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mlp_dimensions_reduced_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mlp_dimensions_reduced_V_we0 <= ap_const_logic_1;
        else 
            mlp_dimensions_reduced_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mlp_dimensions_reduced_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mlp_dimensions_reduced_V_we1 <= ap_const_logic_1;
        else 
            mlp_dimensions_reduced_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    transformer_0_out_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_transformer_fu_759_res_V_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            transformer_0_out_address0 <= ap_const_lv64_3C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            transformer_0_out_address0 <= ap_const_lv64_38(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            transformer_0_out_address0 <= ap_const_lv64_34(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            transformer_0_out_address0 <= ap_const_lv64_30(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            transformer_0_out_address0 <= ap_const_lv64_2C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            transformer_0_out_address0 <= ap_const_lv64_28(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            transformer_0_out_address0 <= ap_const_lv64_24(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            transformer_0_out_address0 <= ap_const_lv64_20(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            transformer_0_out_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            transformer_0_out_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            transformer_0_out_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            transformer_0_out_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            transformer_0_out_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            transformer_0_out_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            transformer_0_out_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            transformer_0_out_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transformer_0_out_address0 <= grp_transformer_fu_759_res_V_address0;
        else 
            transformer_0_out_address0 <= "XXXXX";
        end if; 
    end process;


    transformer_0_out_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_transformer_fu_759_res_V_address1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            transformer_0_out_address1 <= ap_const_lv64_3E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            transformer_0_out_address1 <= ap_const_lv64_3A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            transformer_0_out_address1 <= ap_const_lv64_36(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            transformer_0_out_address1 <= ap_const_lv64_32(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            transformer_0_out_address1 <= ap_const_lv64_2E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            transformer_0_out_address1 <= ap_const_lv64_2A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            transformer_0_out_address1 <= ap_const_lv64_26(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            transformer_0_out_address1 <= ap_const_lv64_22(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            transformer_0_out_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            transformer_0_out_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            transformer_0_out_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            transformer_0_out_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            transformer_0_out_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            transformer_0_out_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            transformer_0_out_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            transformer_0_out_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transformer_0_out_address1 <= grp_transformer_fu_759_res_V_address1;
        else 
            transformer_0_out_address1 <= "XXXXX";
        end if; 
    end process;


    transformer_0_out_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_transformer_fu_759_res_V_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            transformer_0_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transformer_0_out_ce0 <= grp_transformer_fu_759_res_V_ce0;
        else 
            transformer_0_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    transformer_0_out_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_transformer_fu_759_res_V_ce1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            transformer_0_out_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transformer_0_out_ce1 <= grp_transformer_fu_759_res_V_ce1;
        else 
            transformer_0_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    transformer_0_out_we0_assign_proc : process(grp_transformer_fu_759_res_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transformer_0_out_we0 <= grp_transformer_fu_759_res_V_we0;
        else 
            transformer_0_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    transformer_0_out_we1_assign_proc : process(grp_transformer_fu_759_res_V_we1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transformer_0_out_we1 <= grp_transformer_fu_759_res_V_we1;
        else 
            transformer_0_out_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
