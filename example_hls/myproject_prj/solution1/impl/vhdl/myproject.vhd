-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    data_in_V_ce0 : OUT STD_LOGIC;
    data_in_V_q0 : IN STD_LOGIC_VECTOR (29 downto 0);
    data_out_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    data_out_V_ce0 : OUT STD_LOGIC;
    data_out_V_we0 : OUT STD_LOGIC;
    data_out_V_d0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.691000,HLS_SYN_LAT=418829,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=166,HLS_SYN_LUT=392,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal value1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal value1_ce0 : STD_LOGIC;
    signal value1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal value2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal value2_ce0 : STD_LOGIC;
    signal value2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_fu_261_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_415 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln35_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal accum_V_addr_5_reg_425 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1192_fu_297_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln1192_reg_431 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_439 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_447 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln37_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln38_fu_332_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln38_reg_457 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln38_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_407_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_475 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_fu_396_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_483 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln46_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal accum_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal accum_V_ce0 : STD_LOGIC;
    signal accum_V_we0 : STD_LOGIC;
    signal accum_V_d0 : STD_LOGIC_VECTOR (29 downto 0);
    signal accum_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal accum_V_ce1 : STD_LOGIC;
    signal accum_V_we1 : STD_LOGIC;
    signal accum_V_q1 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_0_reg_200 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln36_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_211 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_reg_222 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_0_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j1_0_reg_244 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln39_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_2_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1192_fu_273_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1_fu_285_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal shl_ln_fu_277_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln1192_fu_293_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal zext_ln1192_fu_357_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln1192_1_fu_360_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_fu_365_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal ret_V_fu_373_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_fu_407_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_407_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_407_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component myproject_mul_mul_15ns_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component myproject_value1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_accum_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (29 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (29 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    value1_U : component myproject_value1
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => value1_address0,
        ce0 => value1_ce0,
        q0 => value1_q0);

    value2_U : component myproject_value1
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => value2_address0,
        ce0 => value2_ce0,
        q0 => value2_q0);

    accum_V_U : component myproject_accum_V
    generic map (
        DataWidth => 30,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accum_V_address0,
        ce0 => accum_V_ce0,
        we0 => accum_V_we0,
        d0 => accum_V_d0,
        address1 => accum_V_address1,
        ce1 => accum_V_ce1,
        we1 => accum_V_we1,
        d1 => ap_const_lv30_0,
        q1 => accum_V_q1);

    myproject_mul_mul_15ns_15ns_29_1_1_U1 : component myproject_mul_mul_15ns_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => r_V_fu_407_p0,
        din1 => r_V_fu_407_p1,
        dout => r_V_fu_407_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_reg_211 <= i_reg_439;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_211 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j1_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j1_0_reg_244 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j1_0_reg_244 <= j_reg_483;
            end if; 
        end if;
    end process;

    j_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_303_p2 = ap_const_lv1_1))) then 
                j_0_reg_200 <= j_1_reg_415;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_200 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_336_p2 = ap_const_lv1_1))) then 
                k_0_reg_222 <= k_reg_447;
            elsif (((icmp_ln36_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_0_reg_222 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    m_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                m_0_reg_233 <= m_reg_465;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                m_0_reg_233 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                accum_V_addr_5_reg_425 <= zext_ln39_fu_267_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    add_ln1192_reg_431(41 downto 11) <= add_ln1192_fu_297_p2(41 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_439 <= i_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_415 <= j_1_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_reg_483 <= j_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_reg_447 <= k_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_reg_465 <= m_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                r_V_reg_475 <= r_V_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    zext_ln38_reg_457(14 downto 0) <= zext_ln38_fu_332_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln46_reg_488(2 downto 0) <= zext_ln46_fu_402_p1(2 downto 0);
            end if;
        end if;
    end process;
    add_ln1192_reg_431(10 downto 0) <= "00000000000";
    zext_ln38_reg_457(28 downto 15) <= "00000000000000";
    zext_ln46_reg_488(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln35_fu_255_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln37_fu_315_p2, ap_CS_fsm_state9, icmp_ln38_fu_336_p2, ap_CS_fsm_state12, icmp_ln45_fu_390_p2, icmp_ln36_fu_303_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln35_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_303_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln37_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln45_fu_390_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    accum_V_address0_assign_proc : process(ap_CS_fsm_state1, accum_V_addr_5_reg_425, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            accum_V_address0 <= accum_V_addr_5_reg_425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            accum_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            accum_V_address0 <= "XXX";
        end if; 
    end process;


    accum_V_address1_assign_proc : process(accum_V_addr_5_reg_425, ap_CS_fsm_state10, ap_CS_fsm_state12, zext_ln46_fu_402_p1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            accum_V_address1 <= zext_ln46_fu_402_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            accum_V_address1 <= accum_V_addr_5_reg_425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        else 
            accum_V_address1 <= "XXX";
        end if; 
    end process;


    accum_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            accum_V_ce0 <= ap_const_logic_1;
        else 
            accum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accum_V_ce1 <= ap_const_logic_1;
        else 
            accum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state2, ret_V_fu_373_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            accum_V_d0 <= ret_V_fu_373_p2(41 downto 12);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            accum_V_d0 <= ap_const_lv30_0;
        else 
            accum_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            accum_V_we0 <= ap_const_logic_1;
        else 
            accum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            accum_V_we1 <= ap_const_logic_1;
        else 
            accum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1192_1_fu_360_p2 <= std_logic_vector(unsigned(zext_ln1192_fu_357_p1) + unsigned(add_ln1192_reg_431));
    add_ln1192_fu_297_p2 <= std_logic_vector(unsigned(shl_ln_fu_277_p3) + unsigned(sext_ln1192_fu_293_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state12, icmp_ln45_fu_390_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln45_fu_390_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln45_fu_390_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln45_fu_390_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_in_V_address0 <= zext_ln39_fu_267_p1(3 - 1 downto 0);

    data_in_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_in_V_ce0 <= ap_const_logic_1;
        else 
            data_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_address0 <= zext_ln46_reg_488(3 - 1 downto 0);

    data_out_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_out_V_ce0 <= ap_const_logic_1;
        else 
            data_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_d0 <= accum_V_q1;

    data_out_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_out_V_we0 <= ap_const_logic_1;
        else 
            data_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_309_p2 <= std_logic_vector(unsigned(i_0_reg_211) + unsigned(ap_const_lv5_1));
    icmp_ln35_fu_255_p2 <= "1" when (j_0_reg_200 = ap_const_lv3_5) else "0";
    icmp_ln36_fu_303_p2 <= "1" when (i_0_reg_211 = ap_const_lv5_1E) else "0";
    icmp_ln37_fu_315_p2 <= "1" when (k_0_reg_222 = ap_const_lv5_1E) else "0";
    icmp_ln38_fu_336_p2 <= "1" when (m_0_reg_233 = ap_const_lv5_1E) else "0";
    icmp_ln45_fu_390_p2 <= "1" when (j1_0_reg_244 = ap_const_lv3_5) else "0";
    j_1_fu_261_p2 <= std_logic_vector(unsigned(j_0_reg_200) + unsigned(ap_const_lv3_1));
    j_fu_396_p2 <= std_logic_vector(unsigned(j1_0_reg_244) + unsigned(ap_const_lv3_1));
    k_fu_321_p2 <= std_logic_vector(unsigned(k_0_reg_222) + unsigned(ap_const_lv5_1));
    lhs_V_fu_365_p3 <= (accum_V_q1 & ap_const_lv12_0);
    m_fu_342_p2 <= std_logic_vector(unsigned(m_0_reg_233) + unsigned(ap_const_lv5_1));
    r_V_fu_407_p0 <= r_V_fu_407_p00(15 - 1 downto 0);
    r_V_fu_407_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(value2_q0),29));
    r_V_fu_407_p1 <= zext_ln38_reg_457(15 - 1 downto 0);
    ret_V_fu_373_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_360_p2) + unsigned(lhs_V_fu_365_p3));
        sext_ln1192_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_285_p3),42));

    shl_ln1_fu_285_p3 <= (data_in_V_q0 & ap_const_lv11_0);
    shl_ln_fu_277_p3 <= (trunc_ln1192_fu_273_p1 & ap_const_lv13_0);
    trunc_ln1192_fu_273_p1 <= data_in_V_q0(29 - 1 downto 0);
    value1_address0 <= zext_ln39_1_fu_327_p1(5 - 1 downto 0);

    value1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            value1_ce0 <= ap_const_logic_1;
        else 
            value1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    value2_address0 <= zext_ln39_2_fu_348_p1(5 - 1 downto 0);

    value2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            value2_ce0 <= ap_const_logic_1;
        else 
            value2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1192_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_475),42));
    zext_ln38_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(value1_q0),29));
    zext_ln39_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_222),64));
    zext_ln39_2_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_233),64));
    zext_ln39_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_200),64));
    zext_ln46_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_244),64));
end behav;
