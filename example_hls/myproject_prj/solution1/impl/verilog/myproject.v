// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.691000,HLS_SYN_LAT=418829,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=166,HLS_SYN_LUT=392,HLS_VERSION=2019_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_V_address0,
        data_in_V_ce0,
        data_in_V_q0,
        data_out_V_address0,
        data_out_V_ce0,
        data_out_V_we0,
        data_out_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] data_in_V_address0;
output   data_in_V_ce0;
input  [29:0] data_in_V_q0;
output  [2:0] data_out_V_address0;
output   data_out_V_ce0;
output   data_out_V_we0;
output  [29:0] data_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_V_ce0;
reg data_out_V_ce0;
reg data_out_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] value1_address0;
reg    value1_ce0;
wire   [14:0] value1_q0;
wire   [4:0] value2_address0;
reg    value2_ce0;
wire   [14:0] value2_q0;
wire   [2:0] j_1_fu_261_p2;
reg   [2:0] j_1_reg_415;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln35_fu_255_p2;
reg   [2:0] accum_V_addr_5_reg_425;
wire   [41:0] add_ln1192_fu_297_p2;
reg   [41:0] add_ln1192_reg_431;
wire    ap_CS_fsm_state5;
wire   [4:0] i_fu_309_p2;
reg   [4:0] i_reg_439;
wire    ap_CS_fsm_state6;
wire   [4:0] k_fu_321_p2;
reg   [4:0] k_reg_447;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln37_fu_315_p2;
wire   [28:0] zext_ln38_fu_332_p1;
reg   [28:0] zext_ln38_reg_457;
wire    ap_CS_fsm_state8;
wire   [4:0] m_fu_342_p2;
reg   [4:0] m_reg_465;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln38_fu_336_p2;
wire   [28:0] r_V_fu_407_p2;
reg   [28:0] r_V_reg_475;
wire    ap_CS_fsm_state10;
wire   [2:0] j_fu_396_p2;
reg   [2:0] j_reg_483;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln46_fu_402_p1;
reg   [63:0] zext_ln46_reg_488;
wire   [0:0] icmp_ln45_fu_390_p2;
reg   [2:0] accum_V_address0;
reg    accum_V_ce0;
reg    accum_V_we0;
reg   [29:0] accum_V_d0;
reg   [2:0] accum_V_address1;
reg    accum_V_ce1;
reg    accum_V_we1;
wire   [29:0] accum_V_q1;
reg   [2:0] j_0_reg_200;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln36_fu_303_p2;
reg   [4:0] i_0_reg_211;
reg   [4:0] k_0_reg_222;
reg   [4:0] m_0_reg_233;
wire    ap_CS_fsm_state11;
reg   [2:0] j1_0_reg_244;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln39_fu_267_p1;
wire   [63:0] zext_ln39_1_fu_327_p1;
wire   [63:0] zext_ln39_2_fu_348_p1;
wire   [28:0] trunc_ln1192_fu_273_p1;
wire   [40:0] shl_ln1_fu_285_p3;
wire   [41:0] shl_ln_fu_277_p3;
wire  signed [41:0] sext_ln1192_fu_293_p1;
wire   [41:0] zext_ln1192_fu_357_p1;
wire   [41:0] add_ln1192_1_fu_360_p2;
wire   [41:0] lhs_V_fu_365_p3;
wire   [41:0] ret_V_fu_373_p2;
wire   [14:0] r_V_fu_407_p0;
wire   [14:0] r_V_fu_407_p1;
reg   [12:0] ap_NS_fsm;
wire   [28:0] r_V_fu_407_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

myproject_value1 #(
    .DataWidth( 15 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
value1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(value1_address0),
    .ce0(value1_ce0),
    .q0(value1_q0)
);

myproject_value1 #(
    .DataWidth( 15 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
value2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(value2_address0),
    .ce0(value2_ce0),
    .q0(value2_q0)
);

myproject_accum_V #(
    .DataWidth( 30 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
accum_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(accum_V_address0),
    .ce0(accum_V_ce0),
    .we0(accum_V_we0),
    .d0(accum_V_d0),
    .address1(accum_V_address1),
    .ce1(accum_V_ce1),
    .we1(accum_V_we1),
    .d1(30'd0),
    .q1(accum_V_q1)
);

myproject_mul_mul_15ns_15ns_29_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
myproject_mul_mul_15ns_15ns_29_1_1_U1(
    .din0(r_V_fu_407_p0),
    .din1(r_V_fu_407_p1),
    .dout(r_V_fu_407_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_reg_211 <= i_reg_439;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_211 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j1_0_reg_244 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j1_0_reg_244 <= j_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_303_p2 == 1'd1))) begin
        j_0_reg_200 <= j_1_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_200 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_336_p2 == 1'd1))) begin
        k_0_reg_222 <= k_reg_447;
    end else if (((icmp_ln36_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k_0_reg_222 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        m_0_reg_233 <= m_reg_465;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        m_0_reg_233 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        accum_V_addr_5_reg_425 <= zext_ln39_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln1192_reg_431[41 : 11] <= add_ln1192_fu_297_p2[41 : 11];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_439 <= i_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_415 <= j_1_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_483 <= j_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_reg_447 <= k_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_reg_465 <= m_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_reg_475 <= r_V_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        zext_ln38_reg_457[14 : 0] <= zext_ln38_fu_332_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        zext_ln46_reg_488[2 : 0] <= zext_ln46_fu_402_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        accum_V_address0 = accum_V_addr_5_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        accum_V_address0 = 64'd0;
    end else begin
        accum_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        accum_V_address1 = zext_ln46_fu_402_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        accum_V_address1 = accum_V_addr_5_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_address1 = 64'd2;
    end else begin
        accum_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        accum_V_ce0 = 1'b1;
    end else begin
        accum_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        accum_V_ce1 = 1'b1;
    end else begin
        accum_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        accum_V_d0 = {{ret_V_fu_373_p2[41:12]}};
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        accum_V_d0 = 30'd0;
    end else begin
        accum_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        accum_V_we0 = 1'b1;
    end else begin
        accum_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        accum_V_we1 = 1'b1;
    end else begin
        accum_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln45_fu_390_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln45_fu_390_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_in_V_ce0 = 1'b1;
    end else begin
        data_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_out_V_ce0 = 1'b1;
    end else begin
        data_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_out_V_we0 = 1'b1;
    end else begin
        data_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        value1_ce0 = 1'b1;
    end else begin
        value1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        value2_ce0 = 1'b1;
    end else begin
        value2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln35_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_303_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln37_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_336_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln45_fu_390_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_1_fu_360_p2 = (zext_ln1192_fu_357_p1 + add_ln1192_reg_431);

assign add_ln1192_fu_297_p2 = ($signed(shl_ln_fu_277_p3) + $signed(sext_ln1192_fu_293_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_in_V_address0 = zext_ln39_fu_267_p1;

assign data_out_V_address0 = zext_ln46_reg_488;

assign data_out_V_d0 = accum_V_q1;

assign i_fu_309_p2 = (i_0_reg_211 + 5'd1);

assign icmp_ln35_fu_255_p2 = ((j_0_reg_200 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_303_p2 = ((i_0_reg_211 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_315_p2 = ((k_0_reg_222 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_336_p2 = ((m_0_reg_233 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_390_p2 = ((j1_0_reg_244 == 3'd5) ? 1'b1 : 1'b0);

assign j_1_fu_261_p2 = (j_0_reg_200 + 3'd1);

assign j_fu_396_p2 = (j1_0_reg_244 + 3'd1);

assign k_fu_321_p2 = (k_0_reg_222 + 5'd1);

assign lhs_V_fu_365_p3 = {{accum_V_q1}, {12'd0}};

assign m_fu_342_p2 = (m_0_reg_233 + 5'd1);

assign r_V_fu_407_p0 = r_V_fu_407_p00;

assign r_V_fu_407_p00 = value2_q0;

assign r_V_fu_407_p1 = zext_ln38_reg_457;

assign ret_V_fu_373_p2 = (add_ln1192_1_fu_360_p2 + lhs_V_fu_365_p3);

assign sext_ln1192_fu_293_p1 = $signed(shl_ln1_fu_285_p3);

assign shl_ln1_fu_285_p3 = {{data_in_V_q0}, {11'd0}};

assign shl_ln_fu_277_p3 = {{trunc_ln1192_fu_273_p1}, {13'd0}};

assign trunc_ln1192_fu_273_p1 = data_in_V_q0[28:0];

assign value1_address0 = zext_ln39_1_fu_327_p1;

assign value2_address0 = zext_ln39_2_fu_348_p1;

assign zext_ln1192_fu_357_p1 = r_V_reg_475;

assign zext_ln38_fu_332_p1 = value1_q0;

assign zext_ln39_1_fu_327_p1 = k_0_reg_222;

assign zext_ln39_2_fu_348_p1 = m_0_reg_233;

assign zext_ln39_fu_267_p1 = j_0_reg_200;

assign zext_ln46_fu_402_p1 = j1_0_reg_244;

always @ (posedge ap_clk) begin
    add_ln1192_reg_431[10:0] <= 11'b00000000000;
    zext_ln38_reg_457[28:15] <= 14'b00000000000000;
    zext_ln46_reg_488[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //myproject
