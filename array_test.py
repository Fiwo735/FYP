import numpy as np
import csv
import torch

torch.set_printoptions(profile='full', sci_mode=False, threshold=2097152)

# x_data = '29.938385009765625 178.55862426757812 -67.51207733154297 193.2311248779297 0.17523084580898285 181.0510711669922 0.1761978417634964 -0.3647479712963104 0.008448980748653412 -0.0 1.4046745300292969 0.000455104949651286 0.0 0.008461219258606434 -0.34938931465148926 6.123234262925839e-17'
# x = np.array([float(el) for el in x_data.split(' ')])

# def read_data():
#   t = []
#   with open('extracted_weights_biases/inp_layer_weight.txt', 'r') as infile:
#     for el in infile:
#       t = np.array([float(el) for el in el.split(',')])
#   return t

# def transform_like_HLS(t):
#   return t.reshape(16, 128).flatten(order='F')

# def revert_HLS_read(t):
#   return t.reshape(16, 128, order='F').flatten(order='C')

# # W = transform_like_HLS(revert_HLS_read(read_data()))
# W = transform_like_HLS(read_data())
# # W = read_data()
# # W = revert_HLS_read(transform_like_HLS(read_data()))



# b_data = '-0.13000548725358962, 0.15321474786081246, 0.12929527674052557, 0.015206950508695275, 0.23447747558185644, 0.09874022281814714, 0.08055443812192893, 0.09708138089159975, -0.07273779311405582, -0.12322893275532082, 0.16638944719546161, -0.0380457062048275, -0.20809643746408354, 0.04636303598221752, -0.20849156361063526, -0.15630856766465812, 0.019939414314105005, -0.16307167763540578, 0.13211308506049915, 0.04850441757396684, -0.09605553168035963, 0.20517953883247553, -0.0408014574744629, -0.22652685286299823, 0.0032850375610422246, -0.22111437002391734, -0.0880627388591199, -0.11984570212060142, 0.15678703319760884, -0.14426147915908177, 0.11157324693706362, 0.1877708760096317, -0.24377023986353905, -0.10699731327490204, -0.1952664140062446, 0.1366991235539754, 0.008239823194571864, 0.0874801104650833, 0.14869336991091753, -0.18322061544820797, -0.1777989928778831, -0.016878166650835174, 0.05496910612179433, 0.20661068647095915, -0.05943587907088381, -0.24288547842567945, -0.22713314446368765, 0.2465288022714794, 0.021385598861928857, -0.08325646337390469, 0.10686191047424619, 0.10676398985397025, -0.1633541553777138, -0.14952053865999454, 0.19915420681385843, 0.19434344422812577, -0.037831224849853795, -0.2045501259373567, -0.1148028831831879, -0.0880642920004664, 0.018541760343543365, 0.07898868376789869, -0.20087723036054073, 0.08877956109138797, -0.07548296276593816, 0.08422281814314962, -0.1711215736333881, -0.016183058909840634, -0.2372349461674604, 0.13729433629661408, 0.1453569999605651, 0.12664026308996867, 0.08795013021367319, -0.06395550856608195, 0.007341727299098417, 0.14988690935009433, 0.02718889977683301, -0.0774961605130109, -0.18716313122256875, -0.2141118183176563, 0.22251814368767156, 0.0965662375998225, -0.18929985167605012, -0.24342734586290096, -0.07715175155848142, 0.002901013650594975, -0.06282506813712062, 0.1854011302119078, 0.05603784210655197, 0.16435496283300896, -0.1116496321861801, 0.23209457393288221, -0.14106338057169604, 0.24824387425689096, -0.19459800833927585, 0.1554442863288982, -0.21786285020126947, 0.08693781040991075, 0.05889466432744567, -0.15008649518130698, -0.09922898795523674, 0.11174678126515006, 0.1950289181500067, 0.14313260797022276, 0.06399799977414075, -0.21927662166126963, 0.10037644803307723, -0.022731347992944115, -0.11744471022481108, -0.14947014731247013, -0.04559797825776891, -0.1809006827788517, 0.11896195525425354, -0.1541681865731511, 0.1988955903280805, -0.07942795574391706, -0.19091740893201584, 0.18847534823639128, 0.06740288058960743, 0.0891185801504262, -0.04352037047977531, 0.008459298617431572, -0.23532159044450404, 0.11748434002225557, 0.12400449475606388, 0.11770784626843835, -0.1929820439264993, -0.0980418463339387'
# b = np.array([float(el) for el in b_data.split(',')])

# print(len(x))
# print(len(W))
# print(len(b))

# x_t = torch.from_numpy(x)
# W_t = torch.from_numpy(W.reshape(128, 16))
# b_t = torch.from_numpy(b)

# print(x_t.shape)
# print(W_t.shape)
# print(b_t.shape)

# y_t = torch.matmul(x_t, torch.transpose(W_t, 0, 1)) + b_t

# print(y_t.shape)



# print(x_t)
# # print(W_t)
# # print(b_t)
# print(y_t)

data = '''Columns 1 to 9  0.0402  0.8117 -0.0672  0.0466 -0.9090 -0.7285  1.9935  1.6980  1.1884

Columns 10 to 18  0.6829 -0.7660 -1.4799  0.3449  2.3595 -3.3989  1.5037 -0.0174  0.0446

Columns 19 to 27 -1.3236  1.0209  0.5254  0.7503  0.1492  0.1413 -0.9472 -0.6878 -0.1498

Columns 28 to 36  1.0474 -1.2252 -0.4341 -0.2947 -1.1419  0.3985  0.0380  1.0479 -0.3254

Columns 37 to 45 -0.9603 -0.7849  0.5666  2.0794  0.9537 -0.4600 -1.1351  0.7572 -0.6853

Columns 46 to 54  0.0904  0.9626  0.6569 -1.9285 -0.0470 -0.7854 -0.3121 -1.8357 -0.4154

Columns 55 to 63  1.1418 -0.4621 -0.8087 -0.3228  0.1605  0.1636  2.2846  0.0018  0.6899

Columns 64 to 72  1.5376  0.3815 -1.3340  0.0230 -0.4254 -0.8556 -0.6259 -0.9643 -0.3805

Columns 73 to 81 -0.3294  1.2386 -0.8283  1.0510  0.1857 -0.0237 -1.2979  0.6695 -0.5101

Columns 82 to 90 -1.0592  0.3944 -0.5982 -0.8230  0.2975  1.2248  1.0692  0.1132  2.0313

Columns 91 to 99  0.2631 -0.3638 -0.7028 -1.8671  0.7682 -1.7487 -0.7558 -1.4865 -0.7106

Columns 100 to 108  1.5116  1.2869  1.0267 -1.4078  0.4175  1.1119 -1.2257  0.3794  0.9028

Columns 109 to 117 -1.0706 -0.2135  0.4457  0.0810  0.2778  0.1414  0.9020 -0.3339  1.7003

Columns 118 to 126  0.1839  0.0069  1.0168  0.6317 -0.4956 -0.1546  0.4645  0.3311 -0.8886

Columns 127 to 128 -0.8108  0.5335'''

# data = data.replace('\n', ' ').replace('  ', ' ').split(' ')
# data = [float(el) for el in data if el != 'Columns' and (len(el) == 6 or len(el) == 7)]
# data = np.array(data)

# def LayerNorm(x):
#   eps = 0.00001
#   mean = data.mean()
#   var = data.var()
#   denom = np.sqrt(var + eps)
#   return (x - mean) / denom

# print(data)
# print(len(data))
# data_norm = list(map(LayerNorm, data))
# print(data_norm)

# x0 = data_norm[0]
# W0 = 0.9975005800275384
# b0 = 0.0026351373616355705

# print(f'{x0} * {W0} + {b0} = {x0 * W0 + b0}')

# eps = 0.00001
# denom = np.sqrt(data.var() + eps)

# x0p = data[0]
# W0p = W0 / denom
# b0p = b0 - (W0 * data.mean()) / denom

# print(f'{x0p} * {W0p} + {b0p} = {x0p * W0p + b0p}')

two_cols_data = ''' Columns 1 to 6  4.0166e-02  8.1172e-01 -6.7191e-02  4.6614e-02 -9.0903e-01 -7.2847e-01
 -5.7014e+00  1.5204e+01 -7.8664e+01  3.3840e+01 -3.8329e+01  5.3827e-01

Columns 7 to 12  1.9935e+00  1.6980e+00  1.1884e+00  6.8287e-01 -7.6604e-01 -1.4799e+00
  5.2986e+01 -3.1333e+01  3.5472e+01 -2.6547e+00  6.2923e+01  3.3900e+01

Columns 13 to 18  3.4491e-01  2.3595e+00 -3.3989e+00  1.5037e+00 -1.7384e-02  4.4641e-02
 -8.1424e+01 -7.4460e+01  6.8849e+01 -4.5655e+01 -7.0569e+00  3.5548e+01

Columns 19 to 24 -1.3236e+00  1.0209e+00  5.2538e-01  7.5029e-01  1.4920e-01  1.4126e-01
  1.0429e+02 -4.3172e+01 -2.0595e+01 -5.6813e+01 -5.3800e+00  5.5925e+01

Columns 25 to 30 -9.4725e-01 -6.8775e-01 -1.4980e-01  1.0474e+00 -1.2252e+00 -4.3409e-01
 -1.7794e+00 -6.7590e+01 -6.2920e+01  5.2107e+01 -2.2643e+01 -8.4200e+01

Columns 31 to 36 -2.9474e-01 -1.1419e+00  3.9851e-01  3.8025e-02  1.0479e+00 -3.2536e-01
 -7.4206e+01  1.9916e+01  3.8901e-01 -5.9236e+01  2.1784e+00 -1.1154e+02

Columns 37 to 42 -9.6035e-01 -7.8490e-01  5.6658e-01  2.0794e+00  9.5370e-01 -4.5999e-01
 -3.2694e+01 -3.2237e+01 -1.2724e+02 -1.3618e+01  4.3352e+01 -8.2115e+00

Columns 43 to 48 -1.1351e+00  7.5717e-01 -6.8527e-01  9.0447e-02  9.6255e-01  6.5695e-01
  2.0530e+01 -5.3432e+01  2.7041e+01  2.8485e+01  3.8531e+01  3.7796e+01

Columns 49 to 54 -1.9285e+00 -4.7025e-02 -7.8536e-01 -3.1213e-01 -1.8357e+00 -4.1536e-01
 -2.0574e+01  2.0707e+01  1.4584e+01  2.4021e+01 -1.6413e+00  3.9474e+01

Columns 55 to 60  1.1418e+00 -4.6206e-01 -8.0870e-01 -3.2283e-01  1.6046e-01  1.6364e-01
  5.1219e+01 -4.5856e+01 -8.6610e+01 -2.0438e+01 -1.1581e+02 -2.5232e+01

Columns 61 to 66  2.2846e+00  1.8189e-03  6.8989e-01  1.5376e+00  3.8153e-01 -1.3340e+00
 -5.1264e+01  5.6801e+01  6.3294e+01 -4.9891e+01  6.0301e+01 -6.6557e+01

Columns 67 to 72  2.3007e-02 -4.2540e-01 -8.5557e-01 -6.2592e-01 -9.6432e-01 -3.8051e-01
  4.5856e+01 -3.5293e+01 -3.7130e+01  9.1723e+01 -4.1526e+01 -2.3850e+00

Columns 73 to 78 -3.2941e-01  1.2386e+00 -8.2833e-01  1.0510e+00  1.8569e-01 -2.3679e-02
  7.4889e+01  1.7228e+01  4.2702e+01 -1.9585e+01  2.1697e+00  1.2755e+02

Columns 79 to 84 -1.2979e+00  6.6949e-01 -5.1008e-01 -1.0592e+00  3.9439e-01 -5.9823e-01
  9.0178e-01 -8.5230e+01 -2.0455e+01  8.5052e+00  2.0787e+01  1.6697e+00

Columns 85 to 90 -8.2303e-01  2.9753e-01  1.2248e+00  1.0692e+00  1.1325e-01  2.0313e+00
 -8.1440e+01 -1.0668e+01 -1.0377e+01  4.5341e+01  1.9873e+01  6.3062e+01

Columns 91 to 96  2.6309e-01 -3.6379e-01 -7.0279e-01 -1.8671e+00  7.6823e-01 -1.7487e+00
  3.0095e+01  7.5030e+00  6.8204e+01  4.0604e+01  6.7852e+01 -1.1832e+02

Columns 97 to 102 -7.5583e-01 -1.4865e+00 -7.1064e-01  1.5116e+00  1.2869e+00  1.0267e+00
  6.9340e+01  1.0600e+01  1.2361e-01  4.6617e+01  5.0524e+01 -8.2260e+01

Columns 103 to 108 -1.4078e+00  4.1749e-01  1.1119e+00 -1.2257e+00  3.7944e-01  9.0284e-01
  3.1609e+01 -3.0863e+01 -1.1515e+02 -1.4814e+01  4.4780e+01  8.6973e+01

Columns 109 to 114 -1.0706e+00 -2.1350e-01  4.4565e-01  8.0990e-02  2.7781e-01  1.4136e-01
 -1.7236e+01 -9.1577e-01 -1.9980e+01 -3.5447e+01  5.4663e+01  6.5681e+01

Columns 115 to 120  9.0198e-01 -3.3386e-01  1.7003e+00  1.8390e-01  6.9106e-03  1.0168e+00
  8.9432e+01  2.1229e+01 -8.6101e+00  5.3351e+01  2.3393e+01  6.3784e+01

Columns 121 to 126  6.3169e-01 -4.9564e-01 -1.5460e-01  4.6452e-01  3.3106e-01 -8.8859e-01
 -2.8942e+01 -2.3090e+01  4.6342e+01 -3.2035e+01  5.3410e+01 -4.1347e+01

Columns 127 to 128 -8.1076e-01  5.3354e-01
 -5.9791e+01  2.8221e+01'''

two_cols_data = two_cols_data.replace('\n', ' ').replace('  ', ' ').split(' ')
print(two_cols_data)
two_cols_data = [float(el) for el in two_cols_data if 'e' in el]
two_cols_data = np.array(two_cols_data)

print(two_cols_data)

col1_data = np.array([el for i, el in enumerate(two_cols_data) if ((i < 252 and i % 12 < 6) or (i >= 252 and i % 4 < 2))])
col2_data = np.array([el for i, el in enumerate(two_cols_data) if ((i < 252 and i % 12 >= 6) or (i >= 252 and i % 4 >= 2))])

print(col1_data)
print(col2_data)

col1_mean = col1_data.mean()
col1_var = col1_data.var()
col2_mean = col2_data.mean()
col2_var = col2_data.var()

print(f"{col1_mean = }")
print(f"{col1_var = }")
print(f"{col2_mean = }")
print(f"{col2_var = }")

eps = 1e-5
W0 = 0.9975005800275384
b0 = 0.0026351373616355705
transformed_b0 = b0 - W0 * col1_mean / np.sqrt(col1_var + eps)
transformed_W0 = W0 / np.sqrt(col1_var + eps)
print(f'{transformed_W0 = }')
print(f'{transformed_b0 = }')
transformed_b0 = b0 - W0 * col2_mean / np.sqrt(col2_var + eps)
transformed_W0 = W0 / np.sqrt(col2_var + eps)
print(f'{transformed_W0 = }')
print(f'{transformed_b0 = }')
# c1_norm = lambda x: (x - col1_mean) / (np.sqrt(col1_var + eps)) * W0 + b0
# c2_norm = lambda x: (x - col2_mean) / (np.sqrt(col2_var + eps)) * W0 + b0
W0 = 291.8788422537572
b0 = -0.035605809673920956
c1_norm = lambda x: x * W0 + b0
c2_norm = lambda x: x * W0 + b0

print(c1_norm(col1_data[0]))
print(c2_norm(col2_data[0]))


# name = 'transformer.0.self.norm.weight'

# is_weight = name.split('.')[-1] == 'weight'
# base = '.'.join(name.split('.')[:-1])

# print(is_weight)
# print(base)



# out = '0.0291  0.8141 -0.0834  0.0323 -0.9389 -0.7561  2.0164  1.7139  1.1976 0.6806 -0.7944 -1.5261  0.3381  2.3899 -3.4767  1.5191 -0.0319  0.0322 -1.3620  1.0260  0.5201  0.7483  0.1395  0.1292 -0.9794 -0.7127 -0.1668 1.0547 -1.2606 -0.4559 -0.3145 -1.1771  0.3919  0.0242  1.0530 -0.3467 -0.9925 -0.8133  0.5623  2.1039  0.9564 -0.4818 -1.1674  0.7567 -0.7161 0.0782  0.9672  0.6551 -1.9840 -0.0609 -0.8147 -0.3324 -1.8744 -0.4407 1.1481 -0.4855 -0.8371 -0.3444  0.1488  0.1512  2.3114 -0.0107  0.6887 1.5515  0.3745 -1.3714  0.0093 -0.4467 -0.8814 -0.6521 -0.9963 -0.4015 -0.3504  1.2474 -0.8581  1.0542  0.1751 -0.0384 -1.3358  0.6673 -0.5328 -1.0917  0.3879 -0.6216 -0.8539  0.2906  1.2314  1.0723  0.1012  2.0475 0.2561 -0.3860 -0.7291 -1.9155  0.7681 -1.7925 -0.7818 -1.5299 -0.7381 1.5272  1.2956  1.0302 -1.4486  0.4100  1.1184 -1.2609  0.3731  0.9049 -1.1066 -0.2312  0.4405  0.0676  0.2684  0.1302  0.9057 -0.3540  1.7166 0.1733 -0.0075  1.0232  0.6287 -0.5198 -0.1727  0.4604  0.3220 -0.9179 -0.8400  0.5301'
# out = out.replace('  ', ' ')
# out = out.split(' ')
# out = list(map(float, out))
# print(out)
# print(len(out))
# print(sum(out))
# print(np.mean(out))